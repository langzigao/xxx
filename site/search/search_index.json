{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Readme ¶ lzg ¶","text_tokens":[" ","lzg","¶","readme"],"title":"Readme","title_tokens":["readme"]},{"location":"#readme","text":"","text_tokens":[],"title":"Readme","title_tokens":["readme"]},{"location":"#lzg","text":"","text_tokens":[],"title":"lzg","title_tokens":["lzg"]},{"location":"docker/","text":"什么是 Docker ¶ 操作系统层面的虚拟化技术 对进程进行封装隔离 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。 对比虚拟机，比传统虚拟机更为轻便 ¶ 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程 容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。 特性 容器 虚拟机 启动 秒级 分钟级 硬盘使用 一般为 MB 一般为 GB 性 接近原生 弱于 系统支持量 单机支持上千个容器 一般几十个 为什么要使用 Docker ¶ 更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 什么是 Docker ¶ 镜像 ¶","text_tokens":["单机","利用","，","硬件","其","直接","容器","是","使用","再","。","层面","隔离","其它","快速","系统资源","高效","对","为","和","在","进行","由于","完整","千个","mb","因此","迁移","镜像","虚拟","轻便","要","出","虚拟化","支持","十个","更为","一个","比","原生","部署","系统","于","轻松","秒级","持续","内核","该","一致","更","扩展","的","弱于","操作系统","什么","需","传统","级","进程"," ","所","特性","内","一套","硬盘","为什么","宿主","几十个","一般","时间","对比","交付","称","独立","几十","资源","运行","量","¶","性","docker","技术","环境","而且","后","gb","上","应用","也","启动","没有","自己","封装","接近","维护","虚拟机","分钟","操作"],"title":"docker简介","title_tokens":["docker","简介"]},{"location":"docker/#docker","text":"操作系统层面的虚拟化技术 对进程进行封装隔离 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。","text_tokens":["，","因此","虚拟","其","技术","容器","进程"," ","。","虚拟化","层面","隔离","其它","宿主","也","对","系统","封装","于","为","和","称","独立","的","操作系统","操作","进行","由于"],"title":"什么是 Docker","title_tokens":[" ","docker","什么","是"]},{"location":"docker/#_1","text":"传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程 容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。 特性 容器 虚拟机 启动 秒级 分钟级 硬盘使用 一般为 MB 一般为 GB 性 接近原生 弱于 系统支持量 单机支持上千个容器 一般几十个","text_tokens":["需","完整","传统","进行","单机","千个","mb","，","性","硬件","级","虚拟","其","技术","直接","容器","是","进程","所"," ","特性","使用","出","再","内","一套","。","而且","硬盘","后","gb","支持","上","十个","应用","一个","宿主","也","启动","没有","几十个","一般","自己","原生","系统","于","秒级","接近","内核","该","为","虚拟机","在","几十","的","分钟","弱于","操作系统","运行","操作","量"],"title":"对比虚拟机，比传统虚拟机更为轻便","title_tokens":["虚拟机","对比","更为","传统","轻便","比","，","虚拟"]},{"location":"docker/#docker_1","text":"更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展","text_tokens":["利用","迁移"," ","环境","启动","快速","系统资源","高效","时间","系统","部署","轻松","持续","维护","一致","更","交付","和","资源","扩展","的","运行"],"title":"为什么要使用 Docker","title_tokens":["为什么","使用"," ","docker","什么","要"]},{"location":"docker/#docker_2","text":"","text_tokens":[],"title":"什么是 Docker","title_tokens":[" ","docker","什么","是"]},{"location":"docker/#_2","text":"","text_tokens":[],"title":"镜像","title_tokens":["镜像"]},{"location":"docker_image/","text":"获取镜像 ¶ docker Registry 地址[:端口号]/]仓库名[:标签] 列出镜像（列出部分镜像、以特定格式显示） ¶ docker image ls 查看镜像、容器、数据卷所占用的空间 ¶ docker system df 删除本地镜像 ¶ docker image rm [选项] <镜像1> [<镜像2> ...] 查看镜像内的历史记录 ¶ docker history FROM 指定基础镜像 ¶ 此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。 RUN 执行命令 ¶ RUN <命令> 一个目的一个RUN 每一层构建的最后一定要 清理掉无关文件。 镜像构建 ¶ docker build [选项] <上下文路径/URL/-> docker build 命令会将该目录（上下文路径）下的内容打包交给 Docker 引擎以帮助构建镜像。 一般大家习惯性的会使用默认的文件名 Dockerfile ，以及会将其置于镜像构建上下文目录中 也可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile 直接用 Git repo 进行构建 ¶ docker build https://github.com/twang2218/gitlab-ce-zh.git 用给定的 tar 压缩包构建 ¶ docker build http://server/context.tar.gz 那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。 COPY 复制文件 ¶ COPY <源路径>... <目标路径> COPY package.json /usr/src/app/ 通配符规则要满足 Go 的 filepath.Match 规 则 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用COPY指令，仅在需要自动解压缩的场合使用 ADD 尽可能的使用 COPY CMD 容器启动命令 ¶ CMD [\"可执行文件\", \"参数1\", \"参数2\"...] 在指令格式上，一般推荐使用 exec 格式 ENTRYPOINT 入口点 ¶ 在指定容器启动程序及参数 ENV 设置环境变量 ¶ ENV <key> <value> ARG 构建参数 ¶ VOLUME 定义匿名卷 ¶ docker run -d -v mydata:/data xxxx EXPOSE 声明端口 ¶ EXPOSE <端口1> [<端口2>...] EXPOSE 仅仅是声明容器打算使用什么端口 WORKDIR 指定工作目录 ¶ WORKDIR <工作目录路径> 以后各层的当前目录就被改为指定的目录 USER 指定当前用户 ¶ USER <用户名> 改变之后层的执行 RUN , CMD 以及 ENTRYPOINT 这类命令的身份。 如果以 root 执行的脚本，建议使用 gosu HEALTHCHECK 健康检查 ¶ ONBUILD 为他人做嫁衣裳 ¶ 在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候 才会被执行。 注意 ¶ Docker v17.05 开始支持多阶段构建 CentOS/RHEL 用户在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper ，无论是为了性能、稳定性还是空间利用率。","text_tokens":["一级","一定","workdir","做","利用","package","，","每","expose","build","...","多","口号","记录","其","git","就","给","filepath","1","image","<","容器","2","是","使用","直接","自动","通配符","xxxx","onbuild","。","置于","目标","构建","指令","健康","当以","选择","下","查看","app","卷","各层","清理","及","mydata","空间","原则","均","端口","src","脚本","github","为","地址","获取","gz","以后","dockerfile",">","格式","和","遵循","在","身份","压缩","最后","目的","作为","稳定性","registry","进行","match","需要","某个","性能","一条",",","嫁衣","v","嫁衣裳","阶段","打算","下载","上下文","才","给定","镜像","要","ls","打包","key","部分","参数","必须","推荐",":","会","from","php","则","户名","引擎","这","用","基础","url","尽可能","删除","交给","他人","一个","支持","命令","文件名","tar","data","之后","仓库","并","改为","第一条","json","该","zh","上下","go","d","为了","（","入口","run","当前目录","端口号","exec","的","工作","什么","无关","特定","场合","被","并且","这个","解压","可能","衣裳","环境变","server","健康检查","办法","lvm","用户","..","cmd","可执行文件","设置","volume","direct","定义","本地","利用率","时","必备","变量","中","如果","列出","[","history","时候","centos","arg"," ","所","-","习惯","内","ce","一层","entrypoint","gosu","healthcheck","大家","http","rhel","历史记录","满足","史记","压缩包","类","路径","usr","twang2218","去","/","包","还是","unionfs","执行","匿名","一般","情况","不会","system","建议","将","第一","这样","执行命令","仅仅","规","规则","帮助","尽可","数据","https","\"","行文","¶","用户名","root","当前","）","docker","以","占用","点","配置","标签","开始","devicemapper","注意","源","层","f","v17.05","下文","gitlab","此","环境","环境变量","复制","声明","所有","定性","repo","df","env","上","惯性","也","启动","context","没有","检查","名","用率","解压缩",".","以及","仅","、","]","com","改变","显示","只有","指定","无论","掉","习惯性","可以","文件","目录","程序","内容","默认","add","copy","无论是","选项","那么","value","历史","user","稳定","rm"],"title":"docker镜像","title_tokens":["docker","镜像"]},{"location":"docker_image/#_1","text":"docker Registry 地址[:端口号]/]仓库名[:标签]","text_tokens":["["," ","/","端口号","名","docker","端口",":","仓库","registry","标签","口号","]","地址"],"title":"获取镜像","title_tokens":["镜像","获取"]},{"location":"docker_image/#_2","text":"docker image ls","text_tokens":["ls","docker","image"," "],"title":"列出镜像（列出部分镜像、以特定格式显示）","title_tokens":["列出","显示","（","部分","格式","）","以","特定","镜像","、"]},{"location":"docker_image/#_3","text":"docker system df","text_tokens":["docker","df","system"," "],"title":"查看镜像、容器、数据卷所占用的空间","title_tokens":["卷","容器","所","查看","空间","的","占用","镜像","数据","、"]},{"location":"docker_image/#_4","text":"docker image rm [选项] <镜像1> [<镜像2> ...]","text_tokens":["[","1","image","<","2",">"," ","docker","选项","...","镜像","]","rm"],"title":"删除本地镜像","title_tokens":["镜像","删除","本地"]},{"location":"docker_image/#_5","text":"docker history","text_tokens":["docker","history"," "],"title":"查看镜像内的历史记录","title_tokens":["内","的","历史记录","历史","镜像","查看","记录","史记"]},{"location":"docker_image/#from","text":"此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。","text_tokens":["第一","一个","dockerfile","是"," ","此","必须","第一条","。","的","，","指令","from","并且","必备","一条","中"],"title":"FROM 指定基础镜像","title_tokens":["指定"," ","from","镜像","基础"]},{"location":"docker_image/#run","text":"RUN <命令> 一个目的一个RUN 每一层构建的最后一定要 清理掉无关文件。","text_tokens":["清理","<","一个","命令",">"," ","run","一定","掉","文件","一层","每","的","构建","目的","最后","。","无关","要"],"title":"RUN 执行命令","title_tokens":["命令"," ","run","执行命令","执行"]},{"location":"docker_image/#_6","text":"docker build [选项] <上下文路径/URL/-> docker build 命令会将该目录（上下文路径）下的内容打包交给 Docker 引擎以帮助构建镜像。 一般大家习惯性的会使用默认的文件名 Dockerfile ，以及会将其置于镜像构建上下文目录中 也可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile","text_tokens":["..","）","，","docker","上下文","以","build","镜像","其","中","[","打包","f","<","下文","使用","参数"," ","-","习惯","。","置于","构建","大家","会","php","引擎","下","用","url","交给","路径","命令","惯性","/","文件名","也","一般",".","以及","该","将","]","上下","（","指定","dockerfile",">","习惯性","可以","文件","目录","内容","的","默认","帮助","作为","选项","某个"],"title":"镜像构建","title_tokens":["镜像","构建"]},{"location":"docker_image/#git-repo","text":"docker build https://github.com/twang2218/gitlab-ce-zh.git","text_tokens":["twang2218"," ","/","gitlab","-","ce","docker",":","git","build",".","https","zh","com","github"],"title":"直接用 Git repo 进行构建","title_tokens":["直接"," ","构建","git","进行","repo","用"]},{"location":"docker_image/#tar","text":"docker build http://server/context.tar.gz 那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。","text_tokens":["server","下载","，","docker","上下文","以","build","开始","其","下文"," ","自动","。","构建","http",":","会","引擎","/","context","tar","包","解压缩","并",".","gz","上下","压缩","作为","那么","这个","解压"],"title":"用给定的 tar 压缩包构建","title_tokens":["压缩包"," ","tar","压缩","的","构建","给定","用"]},{"location":"docker_image/#copy","text":"COPY <源路径>... <目标路径> COPY package.json /usr/src/app/ 通配符规则要满足 Go 的 filepath.Match 规 则 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用COPY指令，仅在需要自动解压缩的场合使用 ADD 尽可能的使用 COPY","text_tokens":["package","，","...","要","源","中","filepath","时候","<","使用","通配符"," ","自动","目标","复制","指令","则","选择","所有","满足","app","尽可能","路径","usr","/","原则","均","src","解压缩",".","仅","json","go","场合","这样",">","可以","和","遵循","文件","在","压缩","的","规则","copy","规","add","尽可","match","需要","可能","解压"],"title":"COPY 复制文件","title_tokens":["复制"," ","copy","文件"]},{"location":"docker_image/#cmd","text":"CMD [\"可执行文件\", \"参数1\", \"参数2\"...] 在指令格式上，一般推荐使用 exec 格式","text_tokens":["\"","行文",",","可执行文件","cmd","，","...","[","1","2","使用","参数"," ","推荐","指令","上","执行","一般","]","在","文件","格式","exec"],"title":"CMD 容器启动命令","title_tokens":["容器","命令","启动"," ","cmd"]},{"location":"docker_image/#entrypoint","text":"在指定容器启动程序及参数","text_tokens":["指定","容器","参数","启动","及","在","程序"],"title":"ENTRYPOINT 入口点","title_tokens":["点"," ","入口","entrypoint"]},{"location":"docker_image/#env","text":"ENV <key> <value>","text_tokens":["key","<",">"," ","value","env"],"title":"ENV 设置环境变量","title_tokens":["环境变","env"," ","设置","环境","环境变量","变量"]},{"location":"docker_image/#arg","text":"","text_tokens":[],"title":"ARG 构建参数","title_tokens":[" ","构建","arg","参数"]},{"location":"docker_image/#volume","text":"docker run -d -v mydata:/data xxxx","text_tokens":["xxxx","v"," ","run","-","mydata","/","data","docker",":","d"],"title":"VOLUME 定义匿名卷","title_tokens":["卷"," ","匿名","volume","定义"]},{"location":"docker_image/#expose","text":"EXPOSE <端口1> [<端口2>...] EXPOSE 仅仅是声明容器打算使用什么端口","text_tokens":["1","[","2","<","容器","是",">"," ","使用","打算","仅仅","expose","端口","声明","什么","...","]"],"title":"EXPOSE 声明端口","title_tokens":[" ","expose","声明","端口"]},{"location":"docker_image/#workdir","text":"WORKDIR <工作目录路径> 以后各层的当前目录就被改为指定的目录","text_tokens":["以后","各层","<","路径","指定","workdir"," ",">","当前","当前目录","目录","的","工作","被","改为","就"],"title":"WORKDIR 指定工作目录","title_tokens":["指定","workdir"," ","目录","工作"]},{"location":"docker_image/#user","text":"USER <用户名> 改变之后层的执行 RUN , CMD 以及 ENTRYPOINT 这类命令的身份。 如果以 root 执行的脚本，建议使用 gosu","text_tokens":[",","用户名","用户","root","cmd","，","以","层","如果","<","使用"," ","gosu","entrypoint","。","户名","这","类","命令","执行","之后","改变","以及","脚本","建议",">","run","身份","的","user"],"title":"USER 指定当前用户","title_tokens":["指定","用户"," ","当前","user"]},{"location":"docker_image/#healthcheck","text":"","text_tokens":[],"title":"HEALTHCHECK 健康检查","title_tokens":["健康检查"," ","healthcheck","检查","健康"]},{"location":"docker_image/#onbuild","text":"在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候 才会被执行。","text_tokens":["一级","当前","，","才","镜像","时","时候"," ","当以","。","构建","会","下","基础","去","执行","不会","并","为","只有","在","的","被"],"title":"ONBUILD 为他人做嫁衣裳","title_tokens":["他人","嫁衣","做"," ","onbuild","嫁衣裳","衣裳","为"]},{"location":"docker_image/#_7","text":"Docker v17.05 开始支持多阶段构建 CentOS/RHEL 用户在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper ，无论是为了性能、稳定性还是空间利用率。","text_tokens":["办法","lvm","阶段","用户","一定","direct","利用","利用率","，","docker","配置","多","开始","devicemapper","给","要","centos","v17.05","使用"," ","-","。","构建","rhel","定性","下","支持","还是","/","没有","unionfs","情况","空间","用率","、","为了","无论","在","无论是","的","稳定性","性能","稳定"],"title":"注意","title_tokens":["注意"]},{"location":"monitor/","text":"监控列表（/home/admin/monitor） ¶ wallet_monitor_xx.py （冷钱包地址BTC转入转出监控） ¶ ethwallet_monitor_x.py （冷钱包地址ETH转入转出监控） ¶ btcdaily_transaction_count.py （BTC交易拥堵监控） ¶ ethdaily_transaction_count.py （ETH交易拥堵监控） ¶ qty_monitor_bian.py （binance大单交易监控） ¶ qty_monitor_bitfinex.py （bitfinex大单交易监控） ¶ market_monitor_30.py ¶ market_monitor_60.py ¶ market_monitor_120.py ¶ market_monitor_300.py （行情监控） ¶ wallet_count_monitor_xx.py （冷钱包地址BTC转入转出每日统计） ¶ ethwallet_count_monitor.py （冷钱包地址ETH转入转出每日统计） ¶ datamish_monitor.py （多空持仓监控） ¶ bitmex_treaty.py （合约数据监控） ¶ rich_address_monitor.py （富豪地址余额监控） ¶ 监控详情 ¶ wallet_monitor_xx.py（冷钱包地址BTC转入转出监控） ¶ 需要各交易所的冷钱包地址 通过地址交易列表(BTC.COMAPI)获取地址的转入转出信息 输出:报警，数据库 ethwallet_monitor_x.py (冷钱包地址ETH转入转出监控) ¶ 需要各交易所的冷钱包地址 通过eth_blockNumber(Ethereum Developer APIs)获取最新块编号 通过eth_getBlockByNumber(Ethereum Developer APIs)获取块交易列表信息 通过匹配获取各交易所冷钱包地址转入转出信息 输出:报警，数据库 btcdaily_transaction_count.py （BTC交易拥堵监控） ¶ 通过‘ https://btc.com/service/stats/mempool ’获取BTC当前未处理交易量数据 输出:报警，数据库 ethdaily_transaction_count.py （ETH交易拥堵监控） ¶ 通过‘ https://etherscan.io/chart/pendingtx ’获取eth当前未处理交易量数据 输出:报警，数据库 qty_monitor_bian.py （binance大单交易监控） ¶ 通过Recent trades list(binanceAPI)获取最新交易数据 统计15S内交易量 输出:报警 qty_monitor_bitfinex.py （bitfinex大单交易监控） ¶ 通过Trades(bitfinexAPI)获取最新交易数据 统计15S内交易量 输出:报警 market_monitor_30.py ¶ market_monitor_60.py ¶ market_monitor_120.py ¶ market_monitor_300.py （行情监控） ¶ 通过Order book(binanceAPI)获取各交易对订单薄数据 输出:报警 wallet_count_monitor_xx.py （冷钱包地址BTC转入转出每日统计） ¶ 通过接口‘ https://btc.com/service/addressTxStats?address=%s&start=%s&end=%s ’获取地址日转入转出数据 输出:数据库，可视化 ethwallet_count_monitor.py （冷钱包地址ETH转入转出每日统计） ¶ 对ethwallet_monitor_x入库数据进行统计 输出:数据库，可视化 datamish_monitor.py （多空持仓监控） ¶ 通过datamish.com获取多空数据 输出:数据库，可视化 bitmex_treaty.py （合约数据监控） ¶ 通过‘ https://www.bitmex.com/app/contract/XBTUSD ’获取合约数据 输出:数据库，可视化 rich_address_monitor.py （富豪地址余额监控） ¶ 通过给定地址获取其转出的目标地址 通过地址信息(BTC.COMAPI)获取地址余额 输出:数据库","text_tokens":["bitfinex","持仓","可视化","大单","行情","交易","，","薄","其","接口","contract","120","转","binance","目标","mempool","编号","app","300","%","xbtusd","60","转入","对","块","地址","获取","book","www","service","addresstxstats","&","进行","需要","market","?","transaction","冷","每日","订单","给定","报警","_","ethereum","合约","信息","end","出",":","输出","钱包","count","未","order","交易量","15s","余额","（","pendingtx","(","rich","monitor","的","’","拥堵","‘","处理","bitfinexapi","详情","富豪","s","bitmex","转出","列表","developer","30"," ","wallet","apis","py","内","list","admin","ethdaily","blocknumber","入库","qty","/","btcdaily","=","可视","eth","getblockbynumber","etherscan","btc","stats","binanceapi","x","https","address","数据","日","xx","treaty","¶","recent","trades","start","当前","）","io","ethwallet","交易所","comapi","多空","通过","bian","home","统计",")","数据库","最新","匹配","监控","据库",".","chart","com","各","datamish"],"title":"Monitor","title_tokens":["monitor"]},{"location":"monitor/#homeadminmonitor","text":"","text_tokens":[],"title":"监控列表（/home/admin/monitor）","title_tokens":["home","（","/","monitor","admin","）","监控","列表"]},{"location":"monitor/#wallet_monitor_xxpy-btc","text":"","text_tokens":[],"title":"wallet_monitor_xx.py （冷钱包地址BTC转入转出监控）","title_tokens":["xx","（","冷"," ","wallet","monitor","py","转","出","转入","）","监控","btc","钱包",".","_","地址"]},{"location":"monitor/#ethwallet_monitor_xpy-eth","text":"","text_tokens":[],"title":"ethwallet_monitor_x.py （冷钱包地址ETH转入转出监控）","title_tokens":["（","冷","eth"," ","monitor","py","地址","转","转入","出","）","监控","钱包",".","x","_","ethwallet"]},{"location":"monitor/#btcdaily_transaction_countpy-btc","text":"","text_tokens":[],"title":"btcdaily_transaction_count.py （BTC交易拥堵监控）","title_tokens":[".","transaction","（","btcdaily"," ","）","py","交易","监控","拥堵","btc","count","_"]},{"location":"monitor/#ethdaily_transaction_countpy-eth","text":"","text_tokens":[],"title":"ethdaily_transaction_count.py （ETH交易拥堵监控）","title_tokens":[".","transaction","（"," ","）","py","交易","监控","拥堵","eth","count","ethdaily","_"]},{"location":"monitor/#qty_monitor_bianpy-binance","text":"","text_tokens":[],"title":"qty_monitor_bian.py （binance大单交易监控）","title_tokens":["（","qty"," ","monitor","py","binance","大单","交易","bian","）","监控",".","_"]},{"location":"monitor/#qty_monitor_bitfinexpy-bitfinex","text":"","text_tokens":[],"title":"qty_monitor_bitfinex.py （bitfinex大单交易监控）","title_tokens":["（","qty","bitfinex"," ","monitor","py","大单","）","交易","监控",".","_"]},{"location":"monitor/#market_monitor_30py","text":"","text_tokens":[],"title":"market_monitor_30.py","title_tokens":["market","30","monitor","py",".","_"]},{"location":"monitor/#market_monitor_60py","text":"","text_tokens":[],"title":"market_monitor_60.py","title_tokens":["market","60","monitor","py",".","_"]},{"location":"monitor/#market_monitor_120py","text":"","text_tokens":[],"title":"market_monitor_120.py","title_tokens":["market","120","monitor","py",".","_"]},{"location":"monitor/#market_monitor_300py","text":"","text_tokens":[],"title":"market_monitor_300.py （行情监控）","title_tokens":["market","（","300"," ","monitor","py","行情","）","监控",".","_"]},{"location":"monitor/#wallet_count_monitor_xxpy-btc","text":"","text_tokens":[],"title":"wallet_count_monitor_xx.py （冷钱包地址BTC转入转出每日统计）","title_tokens":["xx",".","统计","（","冷","每日"," ","wallet","monitor","py","转","出","转入","）","btc","钱包","count","_","地址"]},{"location":"monitor/#ethwallet_count_monitorpy-eth","text":"","text_tokens":[],"title":"ethwallet_count_monitor.py （冷钱包地址ETH转入转出每日统计）","title_tokens":["统计","（","冷","每日","eth"," ","monitor","py","地址","转","转入","出","）","count","钱包",".","_","ethwallet"]},{"location":"monitor/#datamish_monitorpy","text":"","text_tokens":[],"title":"datamish_monitor.py （多空持仓监控）","title_tokens":["（","多空","持仓"," ","monitor","datamish","py","）","监控",".","_"]},{"location":"monitor/#bitmex_treatypy","text":"","text_tokens":[],"title":"bitmex_treaty.py （合约数据监控）","title_tokens":["合约","treaty","（"," ","）","py","bitmex","监控",".","数据","_"]},{"location":"monitor/#rich_address_monitorpy","text":"","text_tokens":[],"title":"rich_address_monitor.py （富豪地址余额监控）","title_tokens":["余额","（","rich"," ","monitor","py","）","富豪","监控",".","address","_","地址"]},{"location":"monitor/#_1","text":"","text_tokens":[],"title":"监控详情","title_tokens":["监控","详情"]},{"location":"monitor/#wallet_monitor_xxpybtc","text":"需要各交易所的冷钱包地址 通过地址交易列表(BTC.COMAPI)获取地址的转入转出信息 输出:报警，数据库","text_tokens":["冷","交易","，","列表","报警","交易所","comapi","信息"," ","出","转","通过",":","输出","钱包",")","数据库","转入","据库",".","获取","地址","(","各","的","btc","需要","数据"],"title":"wallet_monitor_xx.py（冷钱包地址BTC转入转出监控）","title_tokens":["xx","（","冷","wallet","monitor","py","转","出","转入","）","监控","btc","钱包",".","_","地址"]},{"location":"monitor/#ethwallet_monitor_xpy-eth_1","text":"需要各交易所的冷钱包地址 通过eth_blockNumber(Ethereum Developer APIs)获取最新块编号 通过eth_getBlockByNumber(Ethereum Developer APIs)获取块交易列表信息 通过匹配获取各交易所冷钱包地址转入转出信息 输出:报警，数据库","text_tokens":["冷","交易","，","列表","developer","报警","_","ethereum","交易所","信息"," ","apis","出","转","通过",":","输出","钱包","编号","blocknumber",")","数据库","最新","转入","匹配","据库","块","eth","getblockbynumber","获取","地址","(","各","的","需要","数据"],"title":"ethwallet_monitor_x.py (冷钱包地址ETH转入转出监控)","title_tokens":["冷","(",")","eth"," ","monitor","py","地址","转","转入","出","监控","钱包",".","x","_","ethwallet"]},{"location":"monitor/#btcdaily_transaction_countpy-btc_1","text":"通过‘ https://btc.com/service/stats/mempool ’获取BTC当前未处理交易量数据 输出:报警，数据库","text_tokens":["https","当前","交易","，","报警"," ","通过",":","mempool","输出","未","/","数据库","交易量","据库",".","com","获取","service","’","‘","stats","btc","处理","数据"],"title":"btcdaily_transaction_count.py （BTC交易拥堵监控）","title_tokens":[".","transaction","（","btcdaily"," ","）","py","交易","监控","拥堵","btc","count","_"]},{"location":"monitor/#ethdaily_transaction_countpy-eth_1","text":"通过‘ https://etherscan.io/chart/pendingtx ’获取eth当前未处理交易量数据 输出:报警，数据库","text_tokens":["https","当前","交易","，","报警","io"," ","通过",":","输出","未","/","数据库","交易量","据库","eth",".","chart","获取","pendingtx","etherscan","’","‘","处理","数据"],"title":"ethdaily_transaction_count.py （ETH交易拥堵监控）","title_tokens":[".","transaction","（"," ","）","py","交易","监控","拥堵","eth","count","ethdaily","_"]},{"location":"monitor/#qty_monitor_bianpy-binance_1","text":"通过Recent trades list(binanceAPI)获取最新交易数据 统计15S内交易量 输出:报警","text_tokens":["统计","recent","trades","("," ",")","最新","内","输出","通过","交易","报警","list",":","15s","交易量","binanceapi","数据","获取"],"title":"qty_monitor_bian.py （binance大单交易监控）","title_tokens":["（","qty"," ","monitor","py","binance","大单","交易","bian","）","监控",".","_"]},{"location":"monitor/#qty_monitor_bitfinexpy-bitfinex_1","text":"通过Trades(bitfinexAPI)获取最新交易数据 统计15S内交易量 输出:报警","text_tokens":["统计","(",")","trades"," ","最新","内","通过","交易","报警",":","15s","交易量","bitfinexapi","输出","数据","获取"],"title":"qty_monitor_bitfinex.py （bitfinex大单交易监控）","title_tokens":["（","qty","bitfinex"," ","monitor","py","大单","）","交易","监控",".","_"]},{"location":"monitor/#market_monitor_30py_1","text":"","text_tokens":[],"title":"market_monitor_30.py","title_tokens":["market","30","monitor","py",".","_"]},{"location":"monitor/#market_monitor_60py_1","text":"","text_tokens":[],"title":"market_monitor_60.py","title_tokens":["market","60","monitor","py",".","_"]},{"location":"monitor/#market_monitor_120py_1","text":"","text_tokens":[],"title":"market_monitor_120.py","title_tokens":["market","120","monitor","py",".","_"]},{"location":"monitor/#market_monitor_300py_1","text":"通过Order book(binanceAPI)获取各交易对订单薄数据 输出:报警","text_tokens":["book","(",")","订单"," ","各","输出","通过","交易","对","order",":","薄","报警","binanceapi","数据","获取"],"title":"market_monitor_300.py （行情监控）","title_tokens":["market","（","300"," ","monitor","py","行情","）","监控",".","_"]},{"location":"monitor/#wallet_count_monitor_xxpy-btc_1","text":"通过接口‘ https://btc.com/service/addressTxStats?address=%s&start=%s&end=%s ’获取地址日转入转出数据 输出:数据库，可视化","text_tokens":["?","https","start","可视化","s","，","接口","数据"," ","end","出","转","通过",":","输出","%","/","数据库","=","转入","可视","据库",".","com","获取","地址","service","addresstxstats","&","’","‘","btc","address","日"],"title":"wallet_count_monitor_xx.py （冷钱包地址BTC转入转出每日统计）","title_tokens":["xx",".","统计","（","冷","每日"," ","wallet","monitor","py","转","出","转入","）","btc","钱包","count","_","地址"]},{"location":"monitor/#ethwallet_count_monitorpy-eth_1","text":"对ethwallet_monitor_x入库数据进行统计 输出:数据库，可视化","text_tokens":["入库","统计"," ","数据库","可视化","monitor","，","可视","对",":","据库","进行","输出","x","数据","_","ethwallet"],"title":"ethwallet_count_monitor.py （冷钱包地址ETH转入转出每日统计）","title_tokens":["统计","（","冷","每日","eth"," ","monitor","py","地址","转","转入","出","）","count","钱包",".","_","ethwallet"]},{"location":"monitor/#datamish_monitorpy_1","text":"通过datamish.com获取多空数据 输出:数据库，可视化","text_tokens":["多空"," ","数据库","可视化","datamish","通过","，","可视",":","据库","输出",".","数据","com","获取"],"title":"datamish_monitor.py  （多空持仓监控）","title_tokens":["（","多空","持仓"," ","monitor","datamish","py","）","监控",".","_"]},{"location":"monitor/#bitmex_treatypy_1","text":"通过‘ https://www.bitmex.com/app/contract/XBTUSD ’获取合约数据 输出:数据库，可视化","text_tokens":["https","可视化","，","bitmex","contract","合约"," ","通过",":","输出","app","xbtusd","/","数据库","可视","据库",".","com","获取","www","’","‘","数据"],"title":"bitmex_treaty.py （合约数据监控）","title_tokens":["合约","treaty","（"," ","）","py","bitmex","监控",".","数据","_"]},{"location":"monitor/#rich_address_monitorpy_1","text":"通过给定地址获取其转出的目标地址 通过地址信息(BTC.COMAPI)获取地址余额 输出:数据库","text_tokens":["转出","给定","其","comapi","信息"," ","通过","目标",":","输出",")","数据库","据库",".","地址","余额","获取","(","的","btc","数据"],"title":"rich_address_monitor.py （富豪地址余额监控）","title_tokens":["余额","（","rich"," ","monitor","py","）","富豪","监控",".","address","_","地址"]},{"location":"docs_test/auto_test_principle/","text":"自动化编码规范 ¶ 正确性 ¶ 自动化用例首先要保证的就是正确性。 功能正确性 ¶ 功能正确性可理解为与正确的用例一致，包括测试目的、步骤、结果等。 目前部分自动化用例存在检查点遗漏的问题，但也不建议所有用例都加上全部检查点，否则会导致用例难以维护和执行时间过长等问题。用例有等级之分，检查点也应有等级之分，同一功能的用例可选择几个用例加上全部检查点，其他用例只加上重要检查点即可，如果把握不好，可加全检查点。 【例】 pushbill的时间检验规则：展现时间与计费时间间隔过长（大于3600秒，或小于-300秒）即被判为作弊。 时间间隔为10秒不被该规则过滤、时间间隔为3601秒被过滤、时间间隔为-301秒被过滤自然应该加全检查点（全部日志内容）。 而时间间隔等于3600秒、-300秒等用例，只检查重要检查点即可，如过滤码是否正确、发送给adm计费内容是否正确、pingback是否正确。 Smoke、important级别的用例必须加全检查点。 设计正确性 ¶ 设计正确性可理解为自动化脚本本身不存在bug 复用性 ¶ 1) 每个插件函数只需完成较独立、完整的小功能。 即实现插件的“高内聚、低耦合”，通过组合，实现不同的功能，提高插件的复用性。 2) 同一类的操作尽量用统一的方式。 如：恢复环境、日志获取、配置文件处理、进程的起停、各种http请求、各种reload操作等。 可维护性 ¶ 1) 插件函数设计需灵活。 尽量不要将数据写死在函数内，可使用参数传递，并赋予默认值，避免大量无意义的赋值操作，提高插件的扩展性，也利于维护。 2) 集中处理易变的业务 将易变的数据、逻辑封装到一个完整的模块中，对外提供低耦合的接口，当业务发生变更的时候，只需要更改相应模块，无需修改其它模块，这也是面象对象设计理念的核心思想。 插件脚本和用例脚本就是两个大层面上的不同的模块，应该将易变的数据、逻辑封装到插件脚本中，而不是写在用例脚本中。 精确性 ¶ 测试条件精确性 ¶ 检查点精确性 ¶ 定位精确性 ¶ 通过抛出的异常能准确快速定位问题所在，前提是设计用例的检查点必须清晰明确。 另外我们自动化框架的assert是退出当前用例，因此先后顺序也影响问题定位。 效率 ¶ 随着自动化用例的不断增加，自动化执行时间也不断增大，我们需要在技术和技巧上对程序进行优化以提高执行效率。 开发效率 ¶ 快速开发自动化用例，时间成本是最大的成本。 可移植性 ¶ 由于自动化用例可能需要在不同机器不同目录下运行，因此要有良好的可移植性。 可读性 ¶ 命名规则 ¶ 意义明确、易于阅读，强调“可扫视”性。 1) 变量名或函数名意义明确，尽量与开发代码中一致，如adid、accid等；或者均以能体显其具体意义的一个或多个英文单词命名，第一个单词小写，从第二个单词开始，单词的首字母大写其它字母小写。如：setFakeAdsAcidFile()，命名风格一致； 2) 当一个插件函数不为外部用例脚本调用时，需要前后都加上两个下划线，如： getSFTPObject 、 parseResponse (rsp) 3) 目前测试开发提供的模拟器代码中，采用的是一种类似于匈牙利命名法的且更为传统的命名规范。变量、函数、类型都由小写英文单词命名，如果用一个以上的单词来命名时，各单词之间用下划线分隔 a) 指针变量加前缀“p_”，指针的指针加前缀“pp_” b) 类型名加后缀“_t” c) 全局变量加前缀“g_” d) 静态变量加前缀“s_” e) 成员变量加前缀“_” 数据构造 ¶ 1) 变量值、文件中数据等尽量与实际一致，不要用个人姓名； 2) 默认参数值尽量使用最常用数据； 增加注释 ¶ 1) 用例测试目的； 2) 主要测试步骤、检查点； 3) 插件函数主要功能； 4) 特殊业务逻辑； 5) 具有一定格式的数据说明； 书写规范 ¶ 1) 缩进 a) 不用空格用tab； b) 1个tab在python中默认对应8个空格； c) 当空格与tab混用时，极易造成错误； 2) 换行 a) 参数列表、运算符应由空格隔开； b) 当一个屏幕显示不下时，一定要换行； c) 换行用’\\’； 3) 空格 a) 如果字符串中需要有一个tab，应用\\t来表示，不要直接输入tab b) 去掉多余的空格、tab或其它不可见的字符 4) 适当的对齐 a) 在表达式中做适当的上下对齐 其他 ¶ 1) 尽量使用已有的、流行的库。 2) 与业务无关的尽量使用公共插件函数。 3) 每一行代码都应该有其存在的明确的理由，代码应在不违反命名规范和书写规范的前提下，尽量精简。 4) 失效的用例不要马上删除，避免功能恢复还需重新开发，可以将其注释掉，或移到一个特定文件xxx.case.invalid。 5) 可以在用例中保留调试信息。 6) 自动化用例的命名统一，以#CASE_为前缀，这样用grep和wc等命令可以方便的统计用例各数。 7) 自动化用例中的函数参数很多的时候，用dict作统一包装。 8) 尽量不改变系统时间，改变系统时间会使测试机上的很多软件业务瘫痪，如最常用的make命令等。 自动化原则 ¶ 必要性 ¶ 一般情况下，正常迭代的模块都要进行自动化，但有些特殊情况下，可以暂不自动化。 无需自动化的模块 ¶ 1) 迭代频率很低（<1次/月）的非核心模块。 2) 目前技术无法实现自动化或实现成本过高。 无需自动化的功能 ¶ 1) 实验性质的临时需求。 2) 不可控的非业务性需求。 例：需求为修复启动小概率core的bug。 3) 实现成本过高且不易变更的需求。 例：模块加载超大数据至内存溢出时打印报 灵活性 ¶ 一般情况下，各个模块均采用常规的功能点级的自动化（python），但特殊情况，可以灵活选用自动化框架及用例设计方式。","text_tokens":["一定","做","先后顺序","每","更改","静态","make","说明","大","<","级别","不同","多余","软件","测试","错误","方便","理念","层面","作","加载","加前缀","300","维护性","阅读","构造","均","对","传递","无","机上","就是","瘫痪","集中","条件","可维护性","和","格式","当","rsp","小","字母","参数传递","信息","不用","低","超大","强调","很","这","流行","准确","前后","调试","类似","不","参数值","正常","该","包括","3600","码","正确性","函数参数","清晰","需","等","变更","增加","隔开","存在","起","扩展性","进程","费时间","对齐","测试步骤","发送给","http","尽量","dict","字符串","我们","/","一般","死","】","将","第一","赋予","这样","机器","混用","月","划线","即","每个","输入","具有","可控","“","不易","恢复","无需","避免","作弊","最大","10","分隔","上","应用","p","匈牙利","法","\\","等级","内存","封装","重要","费时","显示","停","保证","内容","全部","常规","框架","3","调试信息","造成","思想","屏幕","耦合","高","模块","2","直接","是","数传","达式","能体","。","实际","数值","应由","但","写","core","精确性","溢出","影响","利于","赋值","必要","正确","grep","内聚","单词","导致","parseresponse","检验","性需求","理解","迭代","_","极易","心思","参数","风格","表达式","必须","公共","默认值","复用","用","删除","一个","后缀","命令","b","面象","首字","外部","于","系统","pingback","并","一类","上下","（","缩进","对应","各数","采用","有","’","被","处理","c","之间","可能","打印","规范","功能","发生","另外","英文单词","过高","列表","保留","应","组合","过滤","开发","统一","全局","本身","第二","表达","提供","量值","执行","建议","加全","pp","一行","易变","已有","bug","独立","展现","技巧","当前","）","以","插件","英文","自动化","不断","把握","assert","各个","调用","reload","统计","可见","也","启动","检查","名","主要","易于",".","维护","计费","5","展性","xxx","命名","逻辑","各","程序","非核心","可","个人","tab","函数","马上","，","特殊","顺序","其他","接口","都","还","请求","被判","提高","姓名","名加","间隔","下","重新","次","原则","运算","获取","不好","移到","前缀","由于","需要","可移植性","无法","不要","良好","完整","如","精简","成本","因此","日志","可移植","配置文件","明确","加上","空格","至","较","修复","抛出","有些","计费时间","大于","下划","包装","d","报","过长","python","扫视","smoke","扩展","特定","成员","字符","传统","定位","暂","结果","方式","适当","6","中","移植","时候","代码","去掉","书写","与","目前","内","使","送给","秒","情况","随着","时间","应有","算符","完成","所在","从","点级","问题","；","运行","非核","活性","adm","：","变量值","二个","大写","可加","¶","异常","性","模拟器","由","配置","技术","概率","定位问题","环境","首先","具体","常用","即可",")","不是","非","用例","表示","accid","可以","意义","临时","前提","默认","操作","同","7","e","核心思想","模拟","例","难以","下划线","其","1","使用","4","301","自动","等于","选择","个","其它","8","选用","必要性","核心","及","快速","先后","违反","实现","第二个","脚本","小写","为","在","最","对象","a","目的","能","且","进行","可加全","首字母","可读","编码","优化","大量","要","两个","需求","部分","或者","发送","换行","只","会","类型","更为","精确","adid","各种","以上","一致","是否","变量名","(","否则","的","相应","之分","【","显其","无关","灵活","wc","设计","s","同一","很多","查点","时","检查点","如果","变量"," ","-","清晰明确","退出","setfakeadsacidfile","g","注释","getsftpobject","可读性","失效","增大","到","对外","规则","理由","#","”","数据","遗漏","全局变量","过高且","集中处理","移植性","自然","而","开始","或","应该","性质","业务","pushbill","库","多个","通过","灵活性","运算符","所有","指针","屏幕显示","第一个","频率","important","invalid","3601","t","修改","改变","、","步骤","掉","小于","几个","文件","目录","一种","来","实验","不下","效率","case"],"title":"自动化开发规范","title_tokens":["自动","自动化","规范","开发"]},{"location":"docs_test/auto_test_principle/#_1","text":"","text_tokens":[],"title":"自动化编码规范","title_tokens":["自动","自动化","规范","编码"]},{"location":"docs_test/auto_test_principle/#_2","text":"自动化用例首先要保证的就是正确性。","text_tokens":["保证","自动","正确","。","的","首先","正确性","用例","就是","自动化","要"],"title":"正确性","title_tokens":["正确性","正确"]},{"location":"docs_test/auto_test_principle/#_3","text":"功能正确性可理解为与正确的用例一致，包括测试目的、步骤、结果等。 目前部分自动化用例存在检查点遗漏的问题，但也不建议所有用例都加上全部检查点，否则会导致用例难以维护和执行时间过长等问题。用例有等级之分，检查点也应有等级之分，同一功能的用例可选择几个用例加上全部检查点，其他用例只加上重要检查点即可，如果把握不好，可加全检查点。 【例】 pushbill的时间检验规则：展现时间与计费时间间隔过长（大于3600秒，或小于-300秒）即被判为作弊。 时间间隔为10秒不被该规则过滤、时间间隔为3601秒被过滤、时间间隔为-301秒被过滤自然应该加全检查点（全部日志内容）。 而时间间隔等于3600秒、-300秒等用例，只检查重要检查点即可，如过滤码是否正确、发送给adm计费内容是否正确、pingback是否正确。 Smoke、important级别的用例必须加全检查点。","text_tokens":["例","难以","，","其他","都","301","级别","自动","。","被判","测试","等于","选择","间隔","但","300","为","不好","和","正确","目的","可加全","如","导致","检验","日志","理解","加上","部分","必须","发送","只","会","计费时间","不","大于","pingback","该","包括","一致","是否","（","3600","过长","码","有","否则","的","smoke","正确性","之分","【","被","功能","等","同一","结果","查点","检查点","如果","存在","过滤","与"," ","目前","-","费时间","发送给","送给","秒","执行","时间","应有","建议","加全","】","规则","问题","展现","adm","：","即","遗漏","可加","）","自然","而","自动化","或","作弊","把握","10","应该","pushbill","所有","important","即可","也","检查","等级","3601","用例","重要","维护","、","计费","费时","步骤","小于","几个","内容","全部","可"],"title":"功能正确性","title_tokens":["正确","正确性","功能"]},{"location":"docs_test/auto_test_principle/#_4","text":"设计正确性可理解为自动化脚本本身不存在bug","text_tokens":["存在","设计","正确","自动","bug","正确性","可","本身","理解","不","脚本","自动化","为"],"title":"设计正确性","title_tokens":["正确性","设计","正确"]},{"location":"docs_test/auto_test_principle/#_5","text":"1) 每个插件函数只需完成较独立、完整的小功能。 即实现插件的“高内聚、低耦合”，通过组合，实现不同的功能，提高插件的复用性。 2) 同一类的操作尽量用统一的方式。 如：恢复环境、日志获取、配置文件处理、进程的起停、各种http请求、各种reload操作等。","text_tokens":["需","即","：","每个","完整","功能","等","如","“","，","性","插件","方式","恢复","日志","配置","耦合","高","配置文件","1","组合","2","起","统一"," ","不同","进程","。","通过","环境","低","只","提高","较","http","请求","reload","复用","用","尽量",")","函数","实现","各种","、","一类","获取","完成","停","文件","独立","的","内聚","”","操作","处理","同","小"],"title":"复用性","title_tokens":["性","复用"]},{"location":"docs_test/auto_test_principle/#_6","text":"1) 插件函数设计需灵活。 尽量不要将数据写死在函数内，可使用参数传递，并赋予默认值，避免大量无意义的赋值操作，提高插件的扩展性，也利于维护。 2) 集中处理易变的业务 将易变的数据、逻辑封装到一个完整的模块中，对外提供低耦合的接口，当业务发生变更的时候，只需要更改相应模块，无需修改其它模块，这也是面象对象设计理念的核心思想。 插件脚本和用例脚本就是两个大层面上的不同的模块，应该将易变的数据、逻辑封装到插件脚本中，而不是写在用例脚本中。","text_tokens":["核心思想","思想","，","更改","耦合","模块","接口","1","大","2","使用","是","数传","不同","。","提高","理念","层面","其它","写","核心","传递","无","脚本","就是","集中","利于","赋值","和","在","当","对象","需要","不要","完整","大量","两个","参数传递","心思","参数","低","只","默认值","这","一个","面象","并","扩展","的","相应","处理","需","灵活","发生","设计","变更","中","时候","扩展性"," ","内","尽量","提供","死","将","赋予","易变","到","对外","数据","集中处理","而","插件","无需","避免","应该","业务","上",")","也","不是","封装","用例","修改","维护","、","展性","逻辑","意义","默认","可","操作","函数"],"title":"可维护性","title_tokens":["维护性","维护","可维护性"]},{"location":"docs_test/auto_test_principle/#_7","text":"","text_tokens":[],"title":"精确性","title_tokens":["精确","精确性"]},{"location":"docs_test/auto_test_principle/#_8","text":"","text_tokens":[],"title":"测试条件精确性","title_tokens":["条件","精确","测试","精确性"]},{"location":"docs_test/auto_test_principle/#_9","text":"","text_tokens":[],"title":"检查点精确性","title_tokens":["精确性","检查","精确","查点","检查点"]},{"location":"docs_test/auto_test_principle/#_10","text":"通过抛出的异常能准确快速定位问题所在，前提是设计用例的检查点必须清晰明确。 另外我们自动化框架的assert是退出当前用例，因此先后顺序也影响问题定位。","text_tokens":["异常","定位","另外","设计","当前","先后顺序","，","顺序","因此","查点","检查点","自动化","明确","是"," ","清晰明确","必须","自动","定位问题","。","通过","assert","退出","准确","抛出","也","快速","我们","先后","检查","用例","影响","所在","前提","的","能","问题","框架","清晰"],"title":"定位精确性","title_tokens":["定位","精确","精确性"]},{"location":"docs_test/auto_test_principle/#_11","text":"随着自动化用例的不断增加，自动化执行时间也不断增大，我们需要在技术和技巧上对程序进行优化以提高执行效率。","text_tokens":["优化","，","增加","以","技术","自动化","不断","自动","。","提高","上","也","我们","随着","执行","时间","对","用例","效率","增大","在","和","程序","的","进行","需要","技巧"],"title":"效率","title_tokens":["效率"]},{"location":"docs_test/auto_test_principle/#_12","text":"快速开发自动化用例，时间成本是最大的成本。","text_tokens":["最大","开发","是","快速","自动","。","，","的","时间","成本","用例","自动化"],"title":"开发效率","title_tokens":["效率","开发"]},{"location":"docs_test/auto_test_principle/#_13","text":"由于自动化用例可能需要在不同机器不同目录下运行，因此要有良好的可移植性。","text_tokens":["良好","移植性","，","因此","可移植","自动化","要","移植","不同","自动","。","下","用例","在","机器","目录","有","的","运行","由于","需要","可能","可移植性"],"title":"可移植性","title_tokens":["移植","可移植","可移植性","移植性"]},{"location":"docs_test/auto_test_principle/#_14","text":"","text_tokens":[],"title":"可读性","title_tokens":["可读","可读性"]},{"location":"docs_test/auto_test_principle/#_15","text":"意义明确、易于阅读，强调“可扫视”性。 1) 变量名或函数名意义明确，尽量与开发代码中一致，如adid、accid等；或者均以能体显其具体意义的一个或多个英文单词命名，第一个单词小写，从第二个单词开始，单词的首字母大写其它字母小写。如：setFakeAdsAcidFile()，命名风格一致； 2) 当一个插件函数不为外部用例脚本调用时，需要前后都加上两个下划线，如： getSFTPObject 、 parseResponse (rsp) 3) 目前测试开发提供的模拟器代码中，采用的是一种类似于匈牙利命名法的且更为传统的命名规范。变量、函数、类型都由小写英文单词命名，如果用一个以上的单词来命名时，各单词之间用下划线分隔 a) 指针变量加前缀“p_”，指针的指针加前缀“pp_” b) 类型名加后缀“_t” c) 全局变量加前缀“g_” d) 静态变量加前缀“s_” e) 成员变量加前缀“_”","text_tokens":["3","模拟","，","下划线","静态","1","都","2","是","能体","。","测试","名加","其它","加前缀","阅读","均","第二个","脚本","小写","为","当","rsp","前缀","a","且","需要","首字母","单词","字母","如","parseresponse","两个","_","明确","加上","或者","风格","强调","类型","用","更为","一个","后缀","b","前后","adid","首字","外部","于","下划","不","类似","d","以上","一致","变量名","(","采用","扫视","的","显其","c","之间","成员","规范","等","传统","英文单词","s","时","变量","中","如果","代码","开发","与"," ","目前","全局","第二","setfakeadsacidfile","g","尽量","提供","getsftpobject","pp","第一","从","；","”","划线","：","二个","大写","全局变量","“","性","模拟器","由","以","插件","开始","英文","或","分隔","多个","调用","指针","具体","第一个",")","p","匈牙利","法","名","易于","用例","t","、","命名","accid","意义","各","一种","来","可","函数","e"],"title":"命名规则","title_tokens":["规则","命名"]},{"location":"docs_test/auto_test_principle/#_16","text":"1) 变量值、文件中数据等尽量与实际一致，不要用个人姓名； 2) 默认参数值尽量使用最常用数据；","text_tokens":["变量值","不要","等","，","变量","中","1","2","使用","参数","与"," ","实际","数值","姓名","用","常用","尽量",")","量值","参数值","、","一致","文件","最","默认","；","个人","数据"],"title":"数据构造","title_tokens":["数据","构造"]},{"location":"docs_test/auto_test_principle/#_17","text":"1) 用例测试目的； 2) 主要测试步骤、检查点； 3) 插件函数主要功能； 4) 特殊业务逻辑； 5) 具有一定格式的数据说明；","text_tokens":["3","功能","具有","一定","特殊","插件","查点","检查点","说明","1","2","4","业务"," ","测试步骤","测试",")","检查","主要","用例","、","5","逻辑","步骤","格式","的","目的","；","数据","函数"],"title":"增加注释","title_tokens":["增加","注释"]},{"location":"docs_test/auto_test_principle/#_18","text":"1) 缩进 a) 不用空格用tab； b) 1个tab在python中默认对应8个空格； c) 当空格与tab混用时，极易造成错误； 2) 换行 a) 参数列表、运算符应由空格隔开； b) 当一个屏幕显示不下时，一定要换行； c) 换行用’\\’； 3) 空格 a) 如果字符串中需要有一个tab，应用\\t来表示，不要直接输入tab b) 去掉多余的空格、tab或其它不可见的字符 4) 适当的对齐 a) 在表达式中做适当的上下对齐","text_tokens":["3","不要","造成","输入","一定","做","，","屏幕","隔开","列表","适当","时","要","如果","中","或","空格","1","去掉","极易","2","直接","参数","与"," ","多余","4","不用","达式","表达式","换行","对齐","错误","运算符","应由","个","屏幕显示","用","表达","需要","8","其它","应用","一个","可见",")","b","字符串","\\","算符","运算","不","t","表示","、","上下","显示","缩进","对应","在","python","当","有","混用","默认","a","’","来","的","；","不下","tab","c","字符"],"title":"书写规范","title_tokens":["规范","书写"]},{"location":"docs_test/auto_test_principle/#_19","text":"1) 尽量使用已有的、流行的库。 2) 与业务无关的尽量使用公共插件函数。 3) 每一行代码都应该有其存在的明确的理由，代码应在不违反命名规范和书写规范的前提下，尽量精简。 4) 失效的用例不要马上删除，避免功能恢复还需重新开发，可以将其注释掉，或移到一个特定文件xxx.case.invalid。 5) 可以在用例中保留调试信息。 6) 自动化用例的命名统一，以#CASE_为前缀，这样用grep和wc等命令可以方便的统计用例各数。 7) 自动化用例中的函数参数很多的时候，用dict作统一包装。 8) 尽量不改变系统时间，改变系统时间会使测试机上的很多软件业务瘫痪，如最常用的make命令等。","text_tokens":["3","调试信息","马上","每","，","其","make","1","都","2","使用","4","还","自动","。","软件","测试","下","方便","作","重新","8","违反","机上","瘫痪","为","在","和","移到","最","前缀","grep","不要","如","精简","_","明确","信息","7","参数","公共","会","用","流行","删除","一个","命令","调试","系统","不","包装","各数","有","的","无关","特定","函数参数","需","规范","功能","wc","等","很多","6","保留","中","应","存在","时候","代码","书写","开发","与"," ","统一","使","尽量","dict","注释","时间","失效","将","一行","这样","已有","理由","#","以","插件","恢复","自动化","避免","或","应该","业务","库","常用","统计",")","invalid","用例",".","改变","、","5","xxx","命名","掉","可以","文件","前提","函数","case"],"title":"其他","title_tokens":["其他"]},{"location":"docs_test/auto_test_principle/#_20","text":"","text_tokens":[],"title":"自动化原则","title_tokens":["原则","自动","自动化"]},{"location":"docs_test/auto_test_principle/#_21","text":"一般情况下，正常迭代的模块都要进行自动化，但有些特殊情况下，可以暂不自动化。","text_tokens":["模块","但","都","进行","有些","可以","自动","情况","。","一般","，","的","特殊","暂","不","正常","迭代","下","自动化","要"],"title":"必要性","title_tokens":["必要性","必要"]},{"location":"docs_test/auto_test_principle/#_22","text":"1) 迭代频率很低（<1次/月）的非核心模块。 2) 目前技术无法实现自动化或实现成本过高。","text_tokens":["）","成本","过高","迭代","技术","自动化","或","模块","1","2","<"," ","目前","自动","。","低","很","频率",")","次","/","核心","实现","（","的","非核心","非核","月","无法"],"title":"无需自动化的模块","title_tokens":["模块","自动","的","无需","自动化"]},{"location":"docs_test/auto_test_principle/#_23","text":"1) 实验性质的临时需求。 2) 不可控的非业务性需求。 例：需求为修复启动小概率core的bug。 3) 实现成本过高且不易变更的需求。 例：模块加载超大数据至内存溢出时打印报","text_tokens":["：","3","打印","例","可控","过高且","变更","性需求","成本","不易","时","概率","需求","模块","1","2","性质","至","业务"," ","。","超大","加载","修复",")","启动","core","溢出","非","内存","不","实现","为","报","临时","bug","的","实验","数据","小"],"title":"无需自动化的功能","title_tokens":["功能","自动","的","无需","自动化"]},{"location":"docs_test/auto_test_principle/#_24","text":"一般情况下，各个模块均采用常规的功能点级的自动化（python），但特殊情况，可以灵活选用自动化框架及用例设计方式。","text_tokens":["功能","灵活","设计","）","，","特殊","方式","自动化","模块","自动","。","各个","下","但","选用","及","情况","一般","均","用例","（","可以","点级","python","采用","的","常规","框架"],"title":"灵活性","title_tokens":["活性","灵活性","灵活"]},{"location":"docs_test/bug_principle/","text":"Bug描述 ¶ 标题 ¶ 1) 注明系统或模块名称。 2) 简要叙述问题现象及影响 描述 ¶ 重现步骤：重现Bug的最小执行步骤。 结果：Bug导致的结果。 预期：预期正确的结果。 分析：Bug产生的原因，建议代码级。 Bug级别 ¶ Bug共分为三个级别：高级、中级、低级。 依据影响判定 ¶ 多用于线上系统缺陷等级的判定，主要判断方法如下： Bug等级 = MAX（影响收入程度，影响客户程度） 1) 影响收入：包括收入异常减少与收入异常增加。 总收入指本服务每天的总收入，估算影响时不考虑运营等因素。 2) 影响客户：包括客户因广告展示异常、消耗波动异常、客户数据异常等产生质疑或投诉。 依据功能判定 ¶ 多用于线下系统缺陷等级的判定，也可用于线上系统，主要判断方法如下： Bug等级 = AVG（功能重要性，逻辑重要性，发生概率） 1) 功能重要性：功能对于该业务的重要程度。如： a) 主要功能：广告选取、计费功能。 b) 次要功能：query、日志打印功能。 2) 逻辑重要性：功能的正常处理逻辑与异常处理逻辑。如： a) 主要逻辑：正常广告选取逻辑。 b) 次要逻辑：异常广告选取逻辑，如广告相应客户id不存在。 3) 发生概率：缺陷所依赖场景出现的可能性。 a) 可通过PV判定法，在BUG处加日志，打一段时间请求，BUG日志/PV日志即为概率。 详细说明 ¶ 高级 ¶ 1) 严重影响收入、客户。 例： a) 广告选取、排序错误。如：正常广告不展示，下线广告可以展示。 b) 广告展现样式错误。如：广告未标红、广告页面样式严重变形。 c) 广告点击跳转、计费错误。如：广告点击不能跳转到客户页面。 d) 广告入口不可达广告页面。 2) 正常情况下，程序无法提供服务。 例： a) 无法正常启动或停止。 b) 运行中程序崩溃或进程消失。 c) 进程阻塞，对外无响应，超时严重。 d) 严重资源（内存、句柄）泄露，运行一天内可导致服务异常。 3) 可间接导致本服务或相关服务发生严重问题。 例： a) 服务无应有的故障处理及恢复机制。 b) 例行reload接口无效。 c) error_log（CRITICAL、ERROR）级别打印错误导致不能正确报警或误报。 d) 核心日志（如：cd¬_ie_log）重要字段打印错误，可导致众多流程错误。 中级 ¶ 1) 高级中的情况仅偶尔发生或程度较轻。 例： a) 特定条件下，广告选取、排序、展现样式错误。 b) 运行中程序偶尔崩溃或进程消失。 c) 存在资源（内存、句柄）泄露，且不会导致服务异常。 2) 辅助性功能未正确实现。 例： a) 非例行reload接口、query接口。 b) 非核心日志打印，且有一定影响。如：影响性能、导致部分流程错误。 3) 健壮性、兼容性、安全性等缺陷。 例： a) 数据文件、配置文件容错。 b) Js兼容性。如：广告页面样式仅在IE6下发生变形。 低级 ¶ 1) 中级2、3的情况仅偶尔发生。 2) UI/UE缺陷，但不会导致客户投诉。 3) 程序依赖的固化外部数据存在错误。 例： a) ip到区域码对应表。 Bug修复优先级 ¶ Bug规范 ¶ BUG提交 ¶ 1) 所有Bug均需提交Cynthia管理。 2) 提交Bug需描述清晰、准确，级别正确，参考第1、2章，可辅以截图。 通过代码走读发现的Bug可不写重现步骤。 3) 提交Bug时要注明是否影响收入/客户、判断的理由及影响范围。 BUG定位 ¶ 1) Bug需要定位至代码级别，如短时间内（10分钟）难以定位，可交由开发定位。Web系统暂不要求。 2) QA需保留Bug现场（如：log、data、截图），方便RD定位及修复。 3) 如果Bug存在争议，需要PM、RD、QA及其Leader共同认定。 BUG跟踪 ¶ 1) Bug较多时，QA可要求RD按照修复优先级安排修复Bug，参考第3章。 2) 如果Bug修复成本很高，QA可适当提升修复优先级。 3) 如果Bug很严重或影响范围很大，及时公告相关人员。 4) Bug再次发生时，可将已提交Bug激活。 5) 提交Bug后应注意跟踪，督促RD尽快修复Bug。 6) 所有Bug均应在上线前处理完毕，Cynthia状态为“关闭”或“遗留”。 7) 高级Bug必须要求RD修复，如遗留需要PM、RD、QA、OP二线Leader同时确认。 BUG总结 ¶ 1) 对于有价值的Bug及时进行Bug分享或加入测试潜规则。","text_tokens":["pv","健壮性","数据文件","一定","log","说明","跳转","级别","错误","测试","方便","参考","依赖","均","无","op","条件","公告","后应","共同","崩溃","容错","判断","可能性","id","字","很","用于","准确","本","不","正常","该","包括","很大","码","方法","清晰","需","每天","等","一天","增加","存在","进程","分为","/","=","不会","rd","缺陷","将","质疑","减少","出现","超时","即","“","打","恢复","高级","10","兼容性","关闭","法","指本","第","等级","详细","内存","leader","已","重要","样式","容性","处理完毕","辅以","3","固化","最小","总收入","多","发现","模块","高","2","现象","。","avg","但","写","二线","线下","影响","正确","qa","广告页面","需提交","导致","优先","ui","遗留","跟踪","_","截图","章","无效","cynthia","再次","必须","如下","激活","判定","critical","对于","b","系统","外部","短时间","及其","（","ie6","加入","对应","有","处理","c","场景","可能","打印","功能","规范","估算","发生","error","级","保留","应","开发","次要","注明","提供","交由","优先级","执行","一段","建议","管理","名称","bug","展现","确认","）","安排","排序","reload","也","启动","未标","主要","简要","计费","5","兼容","逻辑","要求","程序","状态","选取","分钟","非核心","可","产生","ip","注意","，","流程","接口","较多时","总结","健壮","请求","下","督促","机制","完毕","消失","叙述","性能","需要","无法","如","时要","成本","日志","潜规则","报警","广告","配置文件","因素","至","较","修复","web","data","前","段时间","d","按照","考虑","特定","分析","定位","可不","暂","展示","结果","适当","6","中","代码","人员","与","所","偶尔","客户","内","query","严重","运营","情况","时间","应有","处加","走读","一段时间","不能","资源","重现","问题","低级","运行","非核","段","：","异常","¶","js","停止","描述","配置","三个","概率","共","ue","不可","变形","轻",")","消耗","非","可以","点击","下线","ie","7","例行","例","众多","难以","相关","1","安全","4","cd","核心","及","故障","中级","实现","为","原因","在","max","a","且","范围","进行","阻塞","及时","pm","理完","部分","依据","提升","收入","未","泄露","认定","是否","误报","入口","的","相应","尽快","分享","辅助性","价值","响应","时","如果","辅助"," ","特定条件","重要性","服务","再次发生","区域","预期","页面","到","对外","理由","规则","提交","”","数据","争议","线上","现场","或","安全性","业务","上线","达","通过","因","投诉","¬","所有","程度","间接","红","标题","仅","句柄","、","短时","步骤","同时","文件","表","波动"],"title":"BUG规范","title_tokens":["规范","bug"]},{"location":"docs_test/bug_principle/#bug","text":"","text_tokens":[],"title":"Bug描述","title_tokens":["描述","bug"]},{"location":"docs_test/bug_principle/#_1","text":"1) 注明系统或模块名称。 2) 简要叙述问题现象及影响","text_tokens":["模块","1","2","名称",")","及"," ","现象","。","系统","或","问题","叙述","简要","注明","影响"],"title":"标题","title_tokens":["标题"]},{"location":"docs_test/bug_principle/#_2","text":"重现步骤：重现Bug的最小执行步骤。 结果：Bug导致的结果。 预期：预期正确的结果。 分析：Bug产生的原因，建议代码级。","text_tokens":["：","代码","预期","原因","步骤"," ","正确","导致","bug","最小","重现","的","执行","。","，","结果","级","建议","产生","分析"],"title":"描述","title_tokens":["描述"]},{"location":"docs_test/bug_principle/#bug_1","text":"Bug共分为三个级别：高级、中级、低级。","text_tokens":["：","共","级别","三个","bug","中级","。","低级","高级","分为","、"],"title":"Bug级别","title_tokens":["级别","bug"]},{"location":"docs_test/bug_principle/#_3","text":"多用于线上系统缺陷等级的判定，主要判断方法如下： Bug等级 = MAX（影响收入程度，影响客户程度） 1) 影响收入：包括收入异常减少与收入异常增加。 总收入指本服务每天的总收入，估算影响时不考虑运营等因素。 2) 影响客户：包括客户因广告展示异常、消耗波动异常、客户数据异常等产生质疑或投诉。","text_tokens":["：","每天","异常","等","线上","估算","判断","）","，","总收入","增加","展示","多","时","广告","或","1","因素","2","与"," ","客户","。","如下","因","投诉","收入","用于","判定",")","运营","程度","消耗","指本","服务","=","等级","系统","主要","不","缺陷","、","影响","包括","（","质疑","减少","bug","考虑","的","max","波动","数据","方法","产生"],"title":"依据影响判定","title_tokens":["判定","依据","影响"]},{"location":"docs_test/bug_principle/#_4","text":"多用于线下系统缺陷等级的判定，也可用于线上系统，主要判断方法如下： Bug等级 = AVG（功能重要性，逻辑重要性，发生概率） 1) 功能重要性：功能对于该业务的重要程度。如： a) 主要功能：广告选取、计费功能。 b) 次要功能：query、日志打印功能。 2) 逻辑重要性：功能的正常处理逻辑与异常处理逻辑。如： a) 主要逻辑：正常广告选取逻辑。 b) 次要逻辑：异常广告选取逻辑，如广告相应客户id不存在。 3) 发生概率：缺陷所依赖场景出现的可能性。 a) 可通过PV判定法，在BUG处加日志，打一段时间请求，BUG日志/PV日志即为概率。","text_tokens":["：","打印","3","即","功能","异常","pv","线上","发生","判断","）","如","，","打","日志","多","概率","广告","存在","1","id","2","可能性","业务"," ","与","所","客户","。","通过","请求","如下","次要","avg","用于","query","判定","对于","也",")","程度","b","重要性","依赖","法","/","=","等级","时间","系统","一段","主要","不","正常","段时间","缺陷","重要","处加","线下","该","、","计费","为","（","逻辑","在","一段时间","bug","出现","的","a","选取","相应","可","处理","场景","可能","方法"],"title":"依据功能判定","title_tokens":["功能","依据","判定"]},{"location":"docs_test/bug_principle/#_5","text":"","text_tokens":[],"title":"详细说明","title_tokens":["详细","说明"]},{"location":"docs_test/bug_principle/#_6","text":"1) 严重影响收入、客户。 例： a) 广告选取、排序错误。如：正常广告不展示，下线广告可以展示。 b) 广告展现样式错误。如：广告未标红、广告页面样式严重变形。 c) 广告点击跳转、计费错误。如：广告点击不能跳转到客户页面。 d) 广告入口不可达广告页面。 2) 正常情况下，程序无法提供服务。 例： a) 无法正常启动或停止。 b) 运行中程序崩溃或进程消失。 c) 进程阻塞，对外无响应，超时严重。 d) 严重资源（内存、句柄）泄露，运行一天内可导致服务异常。 3) 可间接导致本服务或相关服务发生严重问题。 例： a) 服务无应有的故障处理及恢复机制。 b) 例行reload接口无效。 c) error_log（CRITICAL、ERROR）级别打印错误导致不能正确报警或误报。 d) 核心日志（如：cd¬_ie_log）重要字段打印错误，可导致众多流程错误。","text_tokens":["3","例","众多","，","相关","流程","log","接口","1","2","跳转","级别","cd","。","错误","下","核心","及","故障","无","影响","机制","消失","正确","a","崩溃","无法","广告页面","阻塞","如","导致","日志","报警","广告","_","字","无效","收入","critical","泄露","b","本","不","正常","d","（","入口","误报","的","处理","c","打印","一天","发生","error","展示","响应","中","进程"," ","客户","内","严重","提供","情况","服务","应有","页面","资源","不能","对外","到","问题","展现","运行","段","超时","：","异常","停止","）","恢复","或","排序","达","不可","reload","¬","变形",")","启动","间接","未标","红","内存","重要","句柄","、","计费","可以","程序","样式","选取","点击","下线","可","ie","例行"],"title":"高级","title_tokens":["高级"]},{"location":"docs_test/bug_principle/#_7","text":"1) 高级中的情况仅偶尔发生或程度较轻。 例： a) 特定条件下，广告选取、排序、展现样式错误。 b) 运行中程序偶尔崩溃或进程消失。 c) 存在资源（内存、句柄）泄露，且不会导致服务异常。 2) 辅助性功能未正确实现。 例： a) 非例行reload接口、query接口。 b) 非核心日志打印，且有一定影响。如：影响性能、导致部分流程错误。 3) 健壮性、兼容性、安全性等缺陷。 例： a) 数据文件、配置文件容错。 b) Js兼容性。如：广告页面样式仅在IE6下发生变形。","text_tokens":["3","健壮性","数据文件","一定","例","，","流程","接口","1","2","安全","健壮","。","错误","下","核心","实现","影响","条件","在","消失","正确","a","崩溃","且","性能","容错","广告页面","如","导致","日志","广告","配置文件","部分","较","未","泄露","b","（","ie6","有","的","特定","c","辅助性","打印","功能","等","发生","中","存在","辅助","偶尔"," ","进程","query","特定条件","情况","服务","不会","缺陷","页面","资源","展现","运行","非核","数据","：","异常","js","）","配置","高级","或","排序","安全性","reload","兼容性","变形","轻",")","程度","非","内存","仅","句柄","、","兼容","文件","程序","样式","选取","非核心","容性","例行"],"title":"中级","title_tokens":["中级"]},{"location":"docs_test/bug_principle/#_8","text":"1) 中级2、3的情况仅偶尔发生。 2) UI/UE缺陷，但不会导致客户投诉。 3) 程序依赖的固化外部数据存在错误。 例： a) ip到区域码对应表。","text_tokens":["3","固化","：","例","发生","导致","，","ui","存在","1","2","偶尔"," ","ue","客户","。","错误","投诉","但",")","依赖","/","情况","中级","不会","外部","缺陷","仅","、","区域","对应","码","表","程序","到","的","a","数据","ip"],"title":"低级","title_tokens":["低级"]},{"location":"docs_test/bug_principle/#bug_2","text":"","text_tokens":[],"title":"Bug修复优先级","title_tokens":["修复","优先级","优先","bug"]},{"location":"docs_test/bug_principle/#bug_3","text":"","text_tokens":[],"title":"Bug规范","title_tokens":["规范","bug"]},{"location":"docs_test/bug_principle/#bug_4","text":"1) 所有Bug均需提交Cynthia管理。 2) 提交Bug需描述清晰、准确，级别正确，参考第1、2章，可辅以截图。 通过代码走读发现的Bug可不写重现步骤。 3) 提交Bug时要注明是否影响收入/客户、判断的理由及影响范围。","text_tokens":["需","3","需提交","时要","判断","可不","，","描述","发现","截图","章","1","代码","2","cynthia"," ","级别","客户","。","通过","所有","收入","注明","准确","参考",")","写","/","及","第","均","、","影响","管理","是否","走读","步骤","正确","bug","的","重现","理由","提交","可","范围","辅以","清晰"],"title":"BUG提交","title_tokens":["提交","bug"]},{"location":"docs_test/bug_principle/#bug_5","text":"1) Bug需要定位至代码级别，如短时间内（10分钟）难以定位，可交由开发定位。Web系统暂不要求。 2) QA需保留Bug现场（如：log、data、截图），方便RD定位及修复。 3) 如果Bug存在争议，需要PM、RD、QA及其Leader共同认定。","text_tokens":["需","：","3","争议","定位","如","现场","）","难以","，","暂","pm","log","保留","截图","如果","存在","1","代码","10","2","至","开发"," ","级别","内","。","方便","修复","交由",")","及","web","data","认定","时间","系统","rd","leader","不","短时间","及其","、","（","短时","要求","共同","bug","分钟","可","需要","qa"],"title":"BUG定位","title_tokens":["定位","bug"]},{"location":"docs_test/bug_principle/#bug_6","text":"1) Bug较多时，QA可要求RD按照修复优先级安排修复Bug，参考第3章。 2) 如果Bug修复成本很高，QA可适当提升修复优先级。 3) 如果Bug很严重或影响范围很大，及时公告相关人员。 4) Bug再次发生时，可将已提交Bug激活。 5) 提交Bug后应注意跟踪，督促RD尽快修复Bug。 6) 所有Bug均应在上线前处理完毕，Cynthia状态为“关闭”或“遗留”。 7) 高级Bug必须要求RD修复，如遗留需要PM、RD、QA、OP二线Leader同时确认。","text_tokens":["3","发生","如","“","优先","及时","，","pm","成本","安排","遗留","高级","适当","相关","时","6","跟踪","如果","或","章","高","1","应","较多时","2","人员","4","再次"," ","上线","理完","cynthia","必须","。","提升","激活","所有","很","修复","需要","严重","参考",")","关闭","优先级","督促","第","均","前","二线","rd","leader","再次发生","已","、","将","影响","很大","5","为","完毕","公告","op","按照","要求","后应","在","同时","bug","状态","确认","提交","尽快","可","范围","处理","”","处理完毕","qa","7","注意"],"title":"BUG跟踪","title_tokens":["跟踪","bug"]},{"location":"docs_test/bug_principle/#bug_7","text":"1) 对于有价值的Bug及时进行Bug分享或加入测试潜规则。","text_tokens":["对于","1",")","加入"," ","价值","有","bug","的","及时","规则","。","分享","测试","进行","潜规则","或"],"title":"BUG总结","title_tokens":["bug","总结"]},{"location":"docs_test/case_principle/","text":"CASE结构 ¶ Case结构一般在3-5层，第一层为系统名称，中间层为模块/子模块，最后一层为功能点。 系统 — 模块/子模块 — 功能 主要元素 ¶ 1) 测试目的 2) 前提条件 3) 输入数据 4) 操作步骤 5) 预期结果 用例等级 ¶ 常见情况 1) 主要逻辑 2) 常见操作 3) 常见请求 4) 常见配置 非常见情况 1) 容错性（程序逻辑必须要处理的） 2) 非常用路径，出现概率较低 3) 一些只影响界面的影响因素，如分辨率，界面调整。 4) 操作比较复杂 5) 非常见状态、数据 异常情况 1) 异常的影响因素 2) 破坏性操作且发生概率较低 3) 人为造成 4) 产品流程中的例外处理一般是Normal级；程序的错误处理一般是Extend级 注意事项 ¶ 1) 冒烟测试额外选取要求 a) 新加入的功能优先考虑。 b) 冒烟测试用例不能是大纲性的，必须满足用例的全部要素的，是可执行的。是从用例中选取出来供开发执行的。 c) 冒烟测试用例只需要在最常见的测试环境中执行，用例中需要定义。 d) 冒烟测试要让开发能够在2小时内完成。 2) 冒烟测试提交开发原则 a) 冒烟测试用例在开发编码完成前提交。 b) 冒烟测试环境数据由开发自己准备。 c) 测试计划时间不足3天的，不需要进行冒烟测试。 3) 判断测试对象是否主要的依据（用于指导执行，不影响用例分级本身） a) 是否常用功能 b) 是否决定收入 c) 是否决定品质 d) 是否开发常关注的功能 e) 是否程序容易出错的地方 f) 浏览器 g) 平台 4) 执行注意事项 a) 分级只对本次未修改的功能生效，本次修改或新增的功能，原则上所有case都要执行。 b) 回归过程中，根据测试对象和用例级别确定执行case的级别。 c) 用例分为4级，不考虑测试对象主次程度的情况下。 i. Smoke用例在开发提交测试时必须执行。 ii. Important用例冻结时或提交时，必须执行。 iii. Normal用例在测试过程中至少执行一遍。 iv. Extand用例可根据具体情况（时间安排等）确定是否执行。 v. 项目leader可根据项目具体情况调整以上确定的执行要求。 d) 对于执行有难度的用例尽早汇报。 如：缺少测试工具、数据难构造、测试结果难检查、场景难模拟、软硬件不具备等等。 用例集命名及划分规范 ¶ 一个用例集就是一个用例文件 对于每个服务，用例集必须有统一的前缀(用例平台根据统一前缀提取用例)，推荐用“test“或者服务名简写如”bidding“等。 用例集一般情况以功能逻辑划分，例如testwapfilterblackkwd.py、testwapretrieverandom.py 分别对应了黑词过滤和随机词召回两个功能 。 * 按逻辑划分时，尽量细分，例如testwapfilterblackkwd.py、testwapfilterquery.py，虽然这两个都是过滤相关的用例，但是不要放到一个用例集。 我们希望用例集的case最好不要过多（小于20？），如果过多则需要进行拆分，例如拆成testwapfilterblackkwd001.py、testwapfilterblackkwd002.py等 用例集结构规范 ¶ #coding:GBK \"\"\" kwd_targetting触发逻辑相关用例 需求:根据用户搜索词进行定向。 \"\"\" import sys import datetime class TestCase: @classmethod def setup_class(self): pass @classmethod def teardown_class(self): pass def setup(self): pass def teardown(self): pass @attr('smoke') def test_001(self): ''' ''' pass @attr('smoke') def test_002(self): ''' ''' pass 第一部分为编码声明，我们的case无特殊情况都采用gbk编码 第二部分为用例集的说明，采用三引号方式包含，后文会专门对用例集说明的书写规范做说明 第三部分为各种import的库 第四部分为用例的类，一个用例集只需要定义一个类，且该类的名称建议统一为TestCase 除测试用例外，TestCase类中包含四个函数，分别为setupclass、teardownclass、setup、teardown，具体意义请查阅nosetest文档 测试用例的命名：统一前缀，建议用test作为前缀，同时建议后面直接接序号 ，如test001、test_002等。测试用例的书写规范后文会详细介绍。 如何对用例集进行说明 ¶ #coding:GBK \"\"\" 直投下载样式 [rb132] 2019-01-23 ------------------------------ [需求说明] 目前直投还不能出下载样式，WF需要配合LDS做这部分的打通 <需求文档链接（如果有）> [开发说明] 1. 功能说明 - 在业务平台上，下载样式和非下载样式均属于小图、三图和大图； - 当客户端同时请求多种样式时，先走小图、三图和大图的原有逻辑，相应的下载样式根据配比随机出。、 - 打底逻辑不变 2. 代码变更 http://cr.adtech.sogou-inc.com/D26264 3. 配置变更 <此处写清增加的配置项以及配置项作用，可以有多个，例如> （1）在某某配置文件增加 xxx，作用xxx功能开关 （2）... 4. 数据变更 <此处写清增加的数据文件、作用、地址等，可以有多个> （1）增加文件：data/dicts/crowds_orient_dict - 文件地址：rsync 10.139.17.110::root/search/odin/penglin/LDS/data/dicts/crowds_orient_dict ./data/dicts/ -aP - 格式: 字段1 \\t 字段2 \\t 字段3 （2）.... 5. 测试建议 <开发测试建议> 6. 其他说明 <可为空> [测试说明] <本用例svn地址> [rb131] 2019-01-10 ------------------------------ [需求说明] [开发说明] [测试说明] \"\"\" - 用例集说明的第一行，用于描述该用例集具体完成哪个功能的测试 - 用例集的后面几行，具体写一下需求背景，以及该功能的逻辑描述等（个人认为把功能介绍放在用例里，比放到业务文档中更好一些） 如何写用例描述 ¶ def test_001(self): ''' 验证KT触发策略是否正确 前提准备: 1.设置三组广告 2.kt字典对应1 2 两组报文中的groupid 3.proto协议中加入kt字典中对应的关键词返回内容 测试步骤及结果验证: 1.发送50次请求， 预期结果：触发广告在1 2 两个报文中，trig_type=5 2.删除字典，发送50次请求 预期结果：触发reload，返回结果走normal逻辑account_id 对应三组报文，trig_type=0 测试用例描述使用三引号包含，切记不要用# 用例描述包括几部分：用例测试目的、测试前提准备、测试步骤、以及对应每个步骤的预期结果 用例描述的第一行，用比较简明的一句话描述出该条用例的测试目的 后面的数行，写测试用例的前提准备 再后面写测试步骤，以及对应的预期结果 关于用例编写过程中的注释 ¶ def test_001(self): ''' 省略... ''' # 数据准备 kwd = \"线上棋牌室\" # ufs返回\"线上棋牌室1~3\" 等3个词 wuid = 'AAHf/anXCgAAAAqQKVMvvQAAQwM=' # global conf self.conf.set_exp_parameter(['FLAG_random_max_kwd_num:2']) self.conf.set_exp_parameter(['FLAG_sel_random_ratio:1']) # 设置ufs 返回数据 query_vec = self.ufs.set_query(1, kwd = kwd) ufs_res = {'status' : 0, 'ufs_expids' : '0', 'query_vec' : query_vec} self.ufs.set_ufs2ks_res_p(ufs_res, self.debug) # 设置wap_random_kwd self.data.data_build('\\t','wap_random_kwd_file', '10','随机词1','10' ) self.data.data_build('\\t','wap_random_kwd_file', '11','随机词2','10' ) # 启动ufs self.serv.start_mock_server('UFS_MOCK') # 启动ks assert self.serv.start_ks() == 0 # 发送TITAN请求 recv_kwd = [] self.titan.set_titan_req(req_type = 3, wuid = wuid, debug = self.debug) for _ in range(100): result = self.titan.request2ks(debug = self.debug) # ks返回结果验证 assert_equals(result['status'], 0) assert_equals(result['kwd_num'], 3) assert_equals(result['keywords_list'][0]['flag'], 100) assert_equals(result['keywords_list'][1]['flag'], 113) assert_equals(result['keywords_list'][2]['flag'], 113) 不同于测试描述，测试注释是指上文“#”开头的，用于说明及分割用例段落 每一个描述相同功能的用例段落的前面，必须要有测试注释来说明其用途（例如数据准备、global conf配置等等） 关于pep8 ¶ 大家在写case时，尽量遵守pep8书写规范（除每行长度）。在写完所有case后，可以使用用例平台的pep8调整功能来规范case，具体方法见用例平台使用说明","text_tokens":["第四","数据文件","做","每","不足","odin","品质","set","113","说明","<","vec","级别","不同","再","res","20","测试","错误","属于","}","import","直投","复杂","构造","均","对","i","无","分辨率","就是","原则上","条件","用途","具体方法","和","格式","当","出来","希望","作为","关键词","容错","groupid","判断","下载","简写","打通","id","非常","titan","低","例外","用于","这","kt","破坏","比","ufs2ks","rb132","pass","不","该用","该","根据","包括","拆分","wuid","具备","后文会","方法","数行","status","ks","等","in","一些","变更","增加","四个","测试环境","里","测试工具","分割","测试步骤","http","分为","满足","尽量","过多","dict","/","我们","写清","浏览","=","一般","可为","外","冒烟","最好","第一","把","出现","黑词","\"","每个","输入","crowds","“","认为","testwapretrieverandom","10","划分","account","更好","相同","ii","异常情况","上","request2ks","p","界面","\\","{","等级","自己","详细","leader","]","第四部","样式","内容","全部","前面","完","两组","serv","按","3","classmethod","造成","比较","过程","简明","产品","~","...","随机","模块","2","直接","是","错误处理","放到","配比","11","。","testwapfilterquery","分别","提条件","配合","三图","写","省略","testcase","请","测试计划","rb131","self","影响","'","编写",">","正确","最后","试用","extand","打底","debug","不同于","计划","search","优先","容易","_","辨率","具体情况","序号","必须","推荐","teardown","用","sys","对于","为用","前提条件","删除","出错","一个","b","002","系统","teardownclass","iii","17.110","random","放在","（","第一部","棋牌","加入","对应","采用","有","分辨","间层","处理","c","场景","除","难度","？","功能","规范","cr","sel","发生","mock","设置","lds","策略","搜索词","级","该条","过滤","开发","统一","一层","本身","类中","第二","缺少","触发","大纲","关键","走","空","试工","执行","大图","建议","一行","名称","话","见","本次","@","每行","start","）","gbk","d26264","以","安排","*","10.139","新","assert","reload","flag","调整","启动","检查","名","主要",".","以及","com","5","xxx","命名","冻结","逻辑","要求","返回","程序","状态","选取","setupclass","主次","汇报","可","个人","23","函数","注意","equals","测试用例","决定","小时","原有","orient","，","datetime","特殊","硬件","客户端","build","流程","引号","其他","都","iv","查阅","ratio","对用","还","type","人为","请求","50","aahf","下","遵守","注意事项","次","原则","地方","pep8","哪个","中间","程序逻辑","for","前缀","需要","不要",",","如","keywords","能够","广告","配置文件","因素","几","常","extend","尽早","较","验证","result","例如","data","前","细分","专门","项目","kwd","d","报文","该类","三组","考虑","smoke","四部","sogou","global","server","用户","小图","nosetest","定义","结果","方式","6","中","anxcgaaaaqqkvmvvqaaqwm","常见","定向","代码","书写","目前","wf","内","客户","写用例","让","....","query","虽然","bidding","路径","本用例","test","情况","时间","testwapfilterblackkwd002","这部分","完成","不能","关注","；","未修改","：","异常","¶","root","性","由","点","描述","配置","层","概率","targetting","额外","召回","环境","声明","生效","inc","具体","coding","常用","后面",")","指上","一部","非","长度","用例","trig","100","事项","供","段落","class","可以","意义","开关","前提","操作","e","元素","模拟","expids","normal","链接","不变","一遍","准备","相关","其","1","使用","4","某某","背景","浏览器","个","指导","及","了","包含","如何","确定","为","地址","文","协议","在","等等","最","对象","a","max","目的","且","num","进行","range","2019","新增","容错性","难","词","编码","v","第三","但是","是从","file","要","至少","testwapfilterblackkwd","两个","需求","proto","或者","部分","penglin","常情","这部","出","依据","接","dicts","发送","只",":","提取","项","收入","字典","先走","子","conf","adtech","各种","以上","作用","是否","搜索","工具","(","字段","的","相应","一句","setup","中间层","拆成","recv","平台","同于","时","如果","req","["," ","-","一下","py","此处","要素","list","大家","操作步骤","几行","关于","g","类","01","注释","服务","第一行","0","parameter","def","test001","attr","回归","预期","—","testwapfilterblackkwd001","提交","#","天","”","结构","数据","线上","切记","exp","破坏性","多则","rsync","比较复杂","第一层","或","过","三","f","棋牌室","wap","业务","软硬","库","多个","ap","所有","多种","后","important","例集","软硬件","介绍","001","程度","文档","t","修改","、","分级","svn","步骤","ufs","小于","文件","同时","来","开头","case"],"title":"CASE规范","title_tokens":["规范","case"]},{"location":"docs_test/case_principle/#case","text":"Case结构一般在3-5层，第一层为系统名称，中间层为模块/子模块，最后一层为功能点。 系统 — 模块/子模块 — 功能","text_tokens":["3","功能","中间层","，","点","第一层","层","模块"," ","-","一层","。","/","一般","子","系统","为","中间","5","第一","名称","—","在","最后","间层","结构","case"],"title":"CASE结构","title_tokens":["结构","case"]},{"location":"docs_test/case_principle/#_1","text":"1) 测试目的 2) 前提条件 3) 输入数据 4) 操作步骤 5) 预期结果","text_tokens":["3","1","条件","2","前提条件","输入",")","4"," ","步骤","预期","前提","目的","测试","操作","操作步骤","结果","提条件","数据","5"],"title":"主要元素","title_tokens":["元素","主要"]},{"location":"docs_test/case_principle/#_2","text":"常见情况 1) 主要逻辑 2) 常见操作 3) 常见请求 4) 常见配置 非常见情况 1) 容错性（程序逻辑必须要处理的） 2) 非常用路径，出现概率较低 3) 一些只影响界面的影响因素，如分辨率，界面调整。 4) 操作比较复杂 5) 非常见状态、数据 异常情况 1) 异常的影响因素 2) 破坏性操作且发生概率较低 3) 人为造成 4) 产品流程中的例外处理一般是Normal级；程序的错误处理一般是Extend级","text_tokens":["3","容错","容错性","异常","比较","造成","如","发生","）","normal","一些","，","破坏性","产品","配置","级","比较复杂","流程","要","概率","中","辨率","常见","1","2","因素","4","是"," ","常情","必须","非常","人为","错误处理","请求","。","extend","低","只","较","错误","异常情况","例外","用","调整","路径",")","破坏","复杂","情况","界面","一般","主要","分辨率","、","程序逻辑","影响","5","（","逻辑","见","程序","出现","状态","的","分辨","且","；","操作","处理","数据"],"title":"用例等级","title_tokens":["用例","等级"]},{"location":"docs_test/case_principle/#_3","text":"1) 冒烟测试额外选取要求 a) 新加入的功能优先考虑。 b) 冒烟测试用例不能是大纲性的，必须满足用例的全部要素的，是可执行的。是从用例中选取出来供开发执行的。 c) 冒烟测试用例只需要在最常见的测试环境中执行，用例中需要定义。 d) 冒烟测试要让开发能够在2小时内完成。 2) 冒烟测试提交开发原则 a) 冒烟测试用例在开发编码完成前提交。 b) 冒烟测试环境数据由开发自己准备。 c) 测试计划时间不足3天的，不需要进行冒烟测试。 3) 判断测试对象是否主要的依据（用于指导执行，不影响用例分级本身） a) 是否常用功能 b) 是否决定收入 c) 是否决定品质 d) 是否开发常关注的功能 e) 是否程序容易出错的地方 f) 浏览器 g) 平台 4) 执行注意事项 a) 分级只对本次未修改的功能生效，本次修改或新增的功能，原则上所有case都要执行。 b) 回归过程中，根据测试对象和用例级别确定执行case的级别。 c) 用例分为4级，不考虑测试对象主次程度的情况下。 i. Smoke用例在开发提交测试时必须执行。 ii. Important用例冻结时或提交时，必须执行。 iii. Normal用例在测试过程中至少执行一遍。 iv. Extand用例可根据具体情况（时间安排等）确定是否执行。 v. 项目leader可根据项目具体情况调整以上确定的执行要求。 d) 对于执行有难度的用例尽早汇报。 如：缺少测试工具、数据难构造、测试结果难检查、场景难模拟、软硬件不具备等等。","text_tokens":["3","测试用例","决定","模拟","小时","normal","过程","，","不足","硬件","品质","一遍","准备","1","都","2","iv","4","是","级别","。","测试","浏览器","下","注意事项","指导","构造","原则","对","i","地方","确定","测试计划","原则上","影响","在","和","等等","出来","对象","最","a","试用","进行","extand","需要","case","新增","难","计划","编码","v","如","判断","优先","容易","是从","能够","要","至少","常","具体情况","必须","依据","只","尽早","收入","用于","对于","出错","b","前","不","iii","项目","d","以上","根据","是否","（","工具","加入","有","考虑","的","smoke","具备","c","场景","难度","功能","等","定义","平台","结果","级","时","测试环境","中","常见","开发"," ","内","测试工具","要素","让","本身","分为","满足","g","缺少","大纲","试工","情况","执行","浏览","时间","冒烟","完成","回归","本次","不能","提交","关注","天","未修改","数据","：","）","性","由","安排","注意","或","f","额外","软硬","环境","新","生效","所有","ii","具体","常用","important","软硬件","调整",")","程度","检查","自己","主要","leader","用例","修改",".","、","分级","事项","冻结","供","要求","程序","选取","全部","主次","汇报","可","e"],"title":"注意事项","title_tokens":["注意事项","事项","注意"]},{"location":"docs_test/case_principle/#_4","text":"一个用例集就是一个用例文件 对于每个服务，用例集必须有统一的前缀(用例平台根据统一前缀提取用例)，推荐用“test“或者服务名简写如”bidding“等。 用例集一般情况以功能逻辑划分，例如testwapfilterblackkwd.py、testwapretrieverandom.py 分别对应了黑词过滤和随机词召回两个功能 。 * 按逻辑划分时，尽量细分，例如testwapfilterblackkwd.py、testwapfilterquery.py，虽然这两个都是过滤相关的用例，但是不要放到一个用例集。 我们希望用例集的case最好不要过多（小于20？），如果过多则需要进行拆分，例如拆成testwapfilterblackkwd001.py、testwapfilterblackkwd002.py等","text_tokens":["，","相关","随机","都","是","放到","。","20","testwapfilterquery","分别","了","就是","和","前缀","希望","进行","需要","不要","词","如","但是","简写","两个","testwapfilterblackkwd","或者","必须","推荐","提取","这","用","对于","一个","例如","细分","根据","（","拆分","(","对应","有","的","？","功能","等","拆成","平台","时","如果","过滤","统一"," ","py","尽量","虽然","过多","bidding","test","我们","服务","情况","一般","testwapfilterblackkwd002","最好","testwapfilterblackkwd001","”","黑词","每个","“","）","testwapretrieverandom","以","*","多则","过","召回","划分","例集",")","名","用例",".","、","逻辑","小于","文件","按","case"],"title":"用例集命名及划分规范","title_tokens":["例集","命名","规范","及","划分","用"]},{"location":"docs_test/case_principle/#_5","text":"#coding:GBK \"\"\" kwd_targetting触发逻辑相关用例 需求:根据用户搜索词进行定向。 \"\"\" import sys import datetime class TestCase: @classmethod def setup_class(self): pass @classmethod def teardown_class(self): pass def setup(self): pass def teardown(self): pass @attr('smoke') def test_001(self): ''' ''' pass @attr('smoke') def test_002(self): ''' ''' pass 第一部分为编码声明，我们的case无特殊情况都采用gbk编码 第二部分为用例集的说明，采用三引号方式包含，后文会专门对用例集说明的书写规范做说明 第三部分为各种import的库 第四部分为用例的类，一个用例集只需要定义一个类，且该类的名称建议统一为TestCase 除测试用例外，TestCase类中包含四个函数，分别为setupclass、teardownclass、setup、teardown，具体意义请查阅nosetest文档 测试用例的命名：统一前缀，建议用test作为前缀，同时建议后面直接接序号 ，如test001、test_002等。测试用例的书写规范后文会详细介绍。","text_tokens":["classmethod","测试用例","第四","做","datetime","，","特殊","相关","引号","说明","都","查阅","直接","对用","。","测试","分别","import","testcase","包含","请","无","self","'","为","前缀","试用","且","作为","进行","需要","编码","如","第三","_","需求","部分","序号","接",":","只","teardown","用","sys","为用","一个","002","pass","teardownclass","专门","kwd","各种","根据","搜索","第一部","(","该类","采用","smoke","的","四部","后文会","除","setup","规范","等","用户","nosetest","定义","搜索词","方式","四个","定向","书写","统一"," ","分为","类中","第二","触发","类","test","我们","情况","外","建议","def","test001","attr","第一","名称","@","#","：","\"","gbk","targetting","三","库","声明","具体","coding","后面","例集","介绍",")","001","文档","一部","详细","用例","、","命名","逻辑","class","第四部","同时","意义","setupclass","函数","case"],"title":"用例集结构规范","title_tokens":["例集","结构","规范","用"]},{"location":"docs_test/case_principle/#_6","text":"#coding:GBK \"\"\" 直投下载样式 [rb132] 2019-01-23 ------------------------------ [需求说明] 目前直投还不能出下载样式，WF需要配合LDS做这部分的打通 <需求文档链接（如果有）> [开发说明] 1. 功能说明 - 在业务平台上，下载样式和非下载样式均属于小图、三图和大图； - 当客户端同时请求多种样式时，先走小图、三图和大图的原有逻辑，相应的下载样式根据配比随机出。、 - 打底逻辑不变 2. 代码变更 http://cr.adtech.sogou-inc.com/D26264 3. 配置变更 <此处写清增加的配置项以及配置项作用，可以有多个，例如> （1）在某某配置文件增加 xxx，作用xxx功能开关 （2）... 4. 数据变更 <此处写清增加的数据文件、作用、地址等，可以有多个> （1）增加文件：data/dicts/crowds_orient_dict - 文件地址：rsync 10.139.17.110::root/search/odin/penglin/LDS/data/dicts/crowds_orient_dict ./data/dicts/ -aP - 格式: 字段1 \\t 字段2 \\t 字段3 （2）.... 5. 测试建议 <开发测试建议> 6. 其他说明 <可为空> [测试说明] <本用例svn地址> [rb131] 2019-01-10 ------------------------------ [需求说明] [开发说明] [测试说明] \"\"\" - 用例集说明的第一行，用于描述该用例集具体完成哪个功能的测试 - 用例集的后面几行，具体写一下需求背景，以及该功能的逻辑描述等（个人认为把功能介绍放在用例里，比放到业务文档中更好一些）","text_tokens":["3","数据文件","做","链接","原有","orient","，","不变","客户端","odin","...","说明","随机","其他","1","2","<","4","还","放到","配比","某某","请求","。","背景","测试","属于","配合","三图","写","直投","均","哪个","rb131","地址",">","在","和","当","格式","需要","打底","2019","search","下载","打通","_","需求","配置文件","部分","penglin","这部","出","dicts",":","项","用于","用","先走","例如","data","比","rb132","adtech","17.110","该用","该","作用","根据","放在","（","字段","有","的","相应","sogou","功能","cr","等","小图","一些","lds","变更","增加","平台","6","时","如果","中","[","代码","里","开发"," ","-","目前","wf","客户","一下","此处","http","几行","....","dict","01","本用例","/","空","写清","可为","大图","第一行","建议","这部分","完成","一行","第一","把","不能","#","；","数据","：","\"","crowds","root","gbk","）","d26264","认为","描述","配置","rsync","10.139","10","业务","多个","更好","ap","多种","inc","具体","coding","后面","例集","介绍","上","文档","\\","非","t","用例",".","以及","、","]","com","xxx","5","svn","逻辑","可以","同时","文件","开关","样式","个人","23"],"title":"如何对用例集进行说明","title_tokens":["例集","对用","如何","进行","说明"]},{"location":"docs_test/case_principle/#_7","text":"def test_001(self): ''' 验证KT触发策略是否正确 前提准备: 1.设置三组广告 2.kt字典对应1 2 两组报文中的groupid 3.proto协议中加入kt字典中对应的关键词返回内容 测试步骤及结果验证: 1.发送50次请求， 预期结果：触发广告在1 2 两个报文中，trig_type=5 2.删除字典，发送50次请求 预期结果：触发reload，返回结果走normal逻辑account_id 对应三组报文，trig_type=0 测试用例描述使用三引号包含，切记不要用# 用例描述包括几部分：用例测试目的、测试前提准备、测试步骤、以及对应每个步骤的预期结果 用例描述的第一行，用比较简明的一句话描述出该条用例的测试目的 后面的数行，写测试用例的前提准备 再后面写测试步骤，以及对应的预期结果","text_tokens":["3","测试用例","比较","normal","简明","，","准备","引号","1","2","使用","type","再","请求","50","测试","写","及","次","包含","self","'","协议","在","正确","试用","目的","关键词","不要","groupid","两个","_","广告","proto","id","几","部分","出","发送",":","字典","验证","用","kt","删除","包括","是否","报文","(","加入","三组","对应","的","一句","数行","设置","策略","结果","该条","中"," ","测试步骤","触发","关键","test","走","=","第一行","0","def","一行","第一","预期","话","#","：","每个","切记","描述","三","account","reload","后面",")","001","trig","用例",".","以及","、","5","逻辑","步骤","返回","前提","内容","两组"],"title":"如何写用例描述","title_tokens":["如何","写用例","描述"]},{"location":"docs_test/case_principle/#_8","text":"def test_001(self): ''' 省略... ''' # 数据准备 kwd = \"线上棋牌室\" # ufs返回\"线上棋牌室1~3\" 等3个词 wuid = 'AAHf/anXCgAAAAqQKVMvvQAAQwM=' # global conf self.conf.set_exp_parameter(['FLAG_random_max_kwd_num:2']) self.conf.set_exp_parameter(['FLAG_sel_random_ratio:1']) # 设置ufs 返回数据 query_vec = self.ufs.set_query(1, kwd = kwd) ufs_res = {'status' : 0, 'ufs_expids' : '0', 'query_vec' : query_vec} self.ufs.set_ufs2ks_res_p(ufs_res, self.debug) # 设置wap_random_kwd self.data.data_build('\\t','wap_random_kwd_file', '10','随机词1','10' ) self.data.data_build('\\t','wap_random_kwd_file', '11','随机词2','10' ) # 启动ufs self.serv.start_mock_server('UFS_MOCK') # 启动ks assert self.serv.start_ks() == 0 # 发送TITAN请求 recv_kwd = [] self.titan.set_titan_req(req_type = 3, wuid = wuid, debug = self.debug) for _ in range(100): result = self.titan.request2ks(debug = self.debug) # ks返回结果验证 assert_equals(result['status'], 0) assert_equals(result['kwd_num'], 3) assert_equals(result['keywords_list'][0]['flag'], 100) assert_equals(result['keywords_list'][1]['flag'], 113) assert_equals(result['keywords_list'][2]['flag'], 113) 不同于测试描述，测试注释是指上文“#”开头的，用于说明及分割用例段落 每一个描述相同功能的用例段落的前面，必须要有测试注释来说明其用途（例如数据准备、global conf配置等等）","text_tokens":["3","expids","~","，","每","build","...","准备","set","113","其","说明","随机","1","ratio","2","vec","是","不同","11","type","res","请求","aahf","测试","个","}","及","省略","self","'","文","用途","for","等等","max","num","range","debug","词",",","不同于","file","keywords","要","_","必须","titan","发送",":","用于","验证","一个","result","例如","data","ufs2ks","conf","kwd","random","（","棋牌","(","wuid","有","的","global","status","server","ks","功能","等","sel","in","mock","recv","设置","结果","同于","req","anxcgaaaaqqkvmvvqaaqwm","["," ","分割","list","query","注释","test","/","=","parameter","0","def","开头","#","”","数据","\"","线上","start","“","exp","）","描述","配置","10","棋牌室","wap","assert","相同","flag","request2ks",")","启动","001","p","指上","\\","{","t","用例",".","100","]","、","段落","ufs","返回","来","前面","serv","equals"],"title":"关于用例编写过程中的注释","title_tokens":["注释","编写","过程","的","用例","关于","中"]},{"location":"docs_test/case_principle/#pep8","text":"大家在写case时，尽量遵守pep8书写规范（除每行长度）。在写完所有case后，可以使用用例平台的pep8调整功能来规范case，具体方法见用例平台使用说明","text_tokens":["规范","每行","功能","）","，","平台","时","说明","使用","书写","。","大家","所有","遵守","具体","后","尽量","调整","写","长度","pep8","用例","（","具体方法","可以","在","见","来","的","完","除","方法","case"],"title":"关于pep8","title_tokens":["关于","pep8"]}]}